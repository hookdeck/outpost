// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/hookdeck/outpost/sdks/go/client/models/components"
)

type ListTenantEventsByDestinationGlobals struct {
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
}

func (o *ListTenantEventsByDestinationGlobals) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

// ListTenantEventsByDestinationStatus - Filter events by delivery status.
type ListTenantEventsByDestinationStatus string

const (
	ListTenantEventsByDestinationStatusSuccess ListTenantEventsByDestinationStatus = "success"
	ListTenantEventsByDestinationStatusFailed  ListTenantEventsByDestinationStatus = "failed"
)

func (e ListTenantEventsByDestinationStatus) ToPointer() *ListTenantEventsByDestinationStatus {
	return &e
}
func (e *ListTenantEventsByDestinationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failed":
		*e = ListTenantEventsByDestinationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTenantEventsByDestinationStatus: %v", v)
	}
}

type ListTenantEventsByDestinationRequest struct {
	// The ID of the tenant. Required when using AdminApiKey authentication.
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
	// The ID of the destination.
	DestinationID string `pathParam:"style=simple,explode=false,name=destination_id"`
	// Filter events by delivery status.
	Status *ListTenantEventsByDestinationStatus `queryParam:"style=form,explode=true,name=status"`
}

func (o *ListTenantEventsByDestinationRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *ListTenantEventsByDestinationRequest) GetDestinationID() string {
	if o == nil {
		return ""
	}
	return o.DestinationID
}

func (o *ListTenantEventsByDestinationRequest) GetStatus() *ListTenantEventsByDestinationStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type ListTenantEventsByDestinationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of events for the destination.
	Events []components.Event
}

func (o *ListTenantEventsByDestinationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListTenantEventsByDestinationResponse) GetEvents() []components.Event {
	if o == nil {
		return nil
	}
	return o.Events
}
