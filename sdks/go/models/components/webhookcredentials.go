// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hookdeck/outpost/sdks/go/client/internal/utils"
	"time"
)

type WebhookCredentials struct {
	// The secret used for signing webhook requests. Auto-generated if omitted on creation by admin. Read-only for tenants unless rotating.
	Secret *string `json:"secret,omitempty"`
	// The previous secret used during rotation. Valid for 24 hours by default. Read-only.
	PreviousSecret *string `json:"previous_secret,omitempty"`
	// ISO timestamp when the previous secret becomes invalid. Read-only.
	PreviousSecretInvalidAt *time.Time `json:"previous_secret_invalid_at,omitempty"`
}

func (w WebhookCredentials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WebhookCredentials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WebhookCredentials) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *WebhookCredentials) GetPreviousSecret() *string {
	if o == nil {
		return nil
	}
	return o.PreviousSecret
}

func (o *WebhookCredentials) GetPreviousSecretInvalidAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.PreviousSecretInvalidAt
}
