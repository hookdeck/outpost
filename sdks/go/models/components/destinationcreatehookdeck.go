// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DestinationCreateHookdeckType - Type of the destination. Must be 'hookdeck'.
type DestinationCreateHookdeckType string

const (
	DestinationCreateHookdeckTypeHookdeck DestinationCreateHookdeckType = "hookdeck"
)

func (e DestinationCreateHookdeckType) ToPointer() *DestinationCreateHookdeckType {
	return &e
}
func (e *DestinationCreateHookdeckType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hookdeck":
		*e = DestinationCreateHookdeckType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationCreateHookdeckType: %v", v)
	}
}

type DestinationCreateHookdeck struct {
	// Optional user-provided ID. A UUID will be generated if empty.
	ID *string `json:"id,omitempty"`
	// Type of the destination. Must be 'hookdeck'.
	Type DestinationCreateHookdeckType `json:"type"`
	// "*" or an array of enabled topics.
	Topics      Topics              `json:"topics"`
	Config      any                 `json:"config,omitempty"`
	Credentials HookdeckCredentials `json:"credentials"`
}

func (o *DestinationCreateHookdeck) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DestinationCreateHookdeck) GetType() DestinationCreateHookdeckType {
	if o == nil {
		return DestinationCreateHookdeckType("")
	}
	return o.Type
}

func (o *DestinationCreateHookdeck) GetTopics() Topics {
	if o == nil {
		return Topics{}
	}
	return o.Topics
}

func (o *DestinationCreateHookdeck) GetConfig() any {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *DestinationCreateHookdeck) GetCredentials() HookdeckCredentials {
	if o == nil {
		return HookdeckCredentials{}
	}
	return o.Credentials
}
