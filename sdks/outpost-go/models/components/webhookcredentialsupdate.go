// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hookdeck/outpost/sdks/outpost-go/internal/utils"
	"time"
)

type WebhookCredentialsUpdate struct {
	// New secret (only allowed for admin).
	Secret *string `json:"secret,omitempty"`
	// Previous secret for rotation (only allowed for admin).
	PreviousSecret *string `json:"previous_secret,omitempty"`
	// Invalidation time for previous secret (only allowed for admin).
	PreviousSecretInvalidAt *time.Time `json:"previous_secret_invalid_at,omitempty"`
	// Set to true to rotate the secret. The current secret becomes the previous_secret, and a new secret is generated. `previous_secret_invalid_at` defaults to 24h if not provided.
	RotateSecret *bool `json:"rotate_secret,omitempty"`
}

func (w WebhookCredentialsUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WebhookCredentialsUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *WebhookCredentialsUpdate) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *WebhookCredentialsUpdate) GetPreviousSecret() *string {
	if o == nil {
		return nil
	}
	return o.PreviousSecret
}

func (o *WebhookCredentialsUpdate) GetPreviousSecretInvalidAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.PreviousSecretInvalidAt
}

func (o *WebhookCredentialsUpdate) GetRotateSecret() *bool {
	if o == nil {
		return nil
	}
	return o.RotateSecret
}
