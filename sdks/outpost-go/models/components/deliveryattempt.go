// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/hookdeck/outpost/sdks/outpost-go/internal/utils"
	"time"
)

type Status string

const (
	StatusSuccess Status = "success"
	StatusFailed  Status = "failed"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failed":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type DeliveryAttempt struct {
	DeliveredAt        *time.Time        `json:"delivered_at,omitempty"`
	Status             *Status           `json:"status,omitempty"`
	ResponseStatusCode *int64            `json:"response_status_code,omitempty"`
	ResponseBody       *string           `json:"response_body,omitempty"`
	ResponseHeaders    map[string]string `json:"response_headers,omitempty"`
}

func (d DeliveryAttempt) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeliveryAttempt) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *DeliveryAttempt) GetDeliveredAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeliveredAt
}

func (o *DeliveryAttempt) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *DeliveryAttempt) GetResponseStatusCode() *int64 {
	if o == nil {
		return nil
	}
	return o.ResponseStatusCode
}

func (o *DeliveryAttempt) GetResponseBody() *string {
	if o == nil {
		return nil
	}
	return o.ResponseBody
}

func (o *DeliveryAttempt) GetResponseHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.ResponseHeaders
}
