// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/hookdeck/outpost/sdks/outpost-go/internal/utils"
	"time"
)

// DestinationRabbitMQType - Type of the destination.
type DestinationRabbitMQType string

const (
	DestinationRabbitMQTypeRabbitmq DestinationRabbitMQType = "rabbitmq"
)

func (e DestinationRabbitMQType) ToPointer() *DestinationRabbitMQType {
	return &e
}
func (e *DestinationRabbitMQType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rabbitmq":
		*e = DestinationRabbitMQType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRabbitMQType: %v", v)
	}
}

type DestinationRabbitMQ struct {
	// Control plane generated ID or user provided ID for the destination.
	ID string `json:"id"`
	// Type of the destination.
	Type DestinationRabbitMQType `json:"type"`
	// "*" or an array of enabled topics.
	Topics Topics `json:"topics"`
	// ISO Date when the destination was disabled, or null if enabled.
	DisabledAt *time.Time `json:"disabled_at"`
	// ISO Date when the destination was created.
	CreatedAt   time.Time           `json:"created_at"`
	Config      RabbitMQConfig      `json:"config"`
	Credentials RabbitMQCredentials `json:"credentials"`
	// A human-readable representation of the destination target (RabbitMQ exchange). Read-only.
	Target *string `json:"target,omitempty"`
	// A URL link to the destination target (not applicable for RabbitMQ exchange). Read-only.
	TargetURL *string `json:"target_url,omitempty"`
}

func (d DestinationRabbitMQ) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationRabbitMQ) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "type", "topics", "disabled_at", "created_at", "config", "credentials"}); err != nil {
		return err
	}
	return nil
}

func (o *DestinationRabbitMQ) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DestinationRabbitMQ) GetType() DestinationRabbitMQType {
	if o == nil {
		return DestinationRabbitMQType("")
	}
	return o.Type
}

func (o *DestinationRabbitMQ) GetTopics() Topics {
	if o == nil {
		return Topics{}
	}
	return o.Topics
}

func (o *DestinationRabbitMQ) GetDisabledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *DestinationRabbitMQ) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DestinationRabbitMQ) GetConfig() RabbitMQConfig {
	if o == nil {
		return RabbitMQConfig{}
	}
	return o.Config
}

func (o *DestinationRabbitMQ) GetCredentials() RabbitMQCredentials {
	if o == nil {
		return RabbitMQCredentials{}
	}
	return o.Credentials
}

func (o *DestinationRabbitMQ) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *DestinationRabbitMQ) GetTargetURL() *string {
	if o == nil {
		return nil
	}
	return o.TargetURL
}
