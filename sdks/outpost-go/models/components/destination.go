// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/hookdeck/outpost/sdks/outpost-go/internal/utils"
)

type DestinationType string

const (
	DestinationTypeWebhook         DestinationType = "webhook"
	DestinationTypeAwsSqs          DestinationType = "aws_sqs"
	DestinationTypeRabbitmq        DestinationType = "rabbitmq"
	DestinationTypeHookdeck        DestinationType = "hookdeck"
	DestinationTypeAwsKinesis      DestinationType = "aws_kinesis"
	DestinationTypeAzureServicebus DestinationType = "azure_servicebus"
)

type Destination struct {
	DestinationWebhook         *DestinationWebhook         `queryParam:"inline"`
	DestinationAWSSQS          *DestinationAWSSQS          `queryParam:"inline"`
	DestinationRabbitMQ        *DestinationRabbitMQ        `queryParam:"inline"`
	DestinationHookdeck        *DestinationHookdeck        `queryParam:"inline"`
	DestinationAWSKinesis      *DestinationAWSKinesis      `queryParam:"inline"`
	DestinationAzureServiceBus *DestinationAzureServiceBus `queryParam:"inline"`

	Type DestinationType
}

func CreateDestinationWebhook(webhook DestinationWebhook) Destination {
	typ := DestinationTypeWebhook

	typStr := DestinationWebhookType(typ)
	webhook.Type = typStr

	return Destination{
		DestinationWebhook: &webhook,
		Type:               typ,
	}
}

func CreateDestinationAwsSqs(awsSqs DestinationAWSSQS) Destination {
	typ := DestinationTypeAwsSqs

	typStr := DestinationAWSSQSType(typ)
	awsSqs.Type = typStr

	return Destination{
		DestinationAWSSQS: &awsSqs,
		Type:              typ,
	}
}

func CreateDestinationRabbitmq(rabbitmq DestinationRabbitMQ) Destination {
	typ := DestinationTypeRabbitmq

	typStr := DestinationRabbitMQType(typ)
	rabbitmq.Type = typStr

	return Destination{
		DestinationRabbitMQ: &rabbitmq,
		Type:                typ,
	}
}

func CreateDestinationHookdeck(hookdeck DestinationHookdeck) Destination {
	typ := DestinationTypeHookdeck

	typStr := DestinationHookdeckType(typ)
	hookdeck.Type = typStr

	return Destination{
		DestinationHookdeck: &hookdeck,
		Type:                typ,
	}
}

func CreateDestinationAwsKinesis(awsKinesis DestinationAWSKinesis) Destination {
	typ := DestinationTypeAwsKinesis

	typStr := DestinationAWSKinesisType(typ)
	awsKinesis.Type = typStr

	return Destination{
		DestinationAWSKinesis: &awsKinesis,
		Type:                  typ,
	}
}

func CreateDestinationAzureServicebus(azureServicebus DestinationAzureServiceBus) Destination {
	typ := DestinationTypeAzureServicebus

	typStr := DestinationAzureServiceBusType(typ)
	azureServicebus.Type = typStr

	return Destination{
		DestinationAzureServiceBus: &azureServicebus,
		Type:                       typ,
	}
}

func (u *Destination) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "webhook":
		destinationWebhook := new(DestinationWebhook)
		if err := utils.UnmarshalJSON(data, &destinationWebhook, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == webhook) type DestinationWebhook within Destination: %w", string(data), err)
		}

		u.DestinationWebhook = destinationWebhook
		u.Type = DestinationTypeWebhook
		return nil
	case "aws_sqs":
		destinationAWSSQS := new(DestinationAWSSQS)
		if err := utils.UnmarshalJSON(data, &destinationAWSSQS, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == aws_sqs) type DestinationAWSSQS within Destination: %w", string(data), err)
		}

		u.DestinationAWSSQS = destinationAWSSQS
		u.Type = DestinationTypeAwsSqs
		return nil
	case "rabbitmq":
		destinationRabbitMQ := new(DestinationRabbitMQ)
		if err := utils.UnmarshalJSON(data, &destinationRabbitMQ, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == rabbitmq) type DestinationRabbitMQ within Destination: %w", string(data), err)
		}

		u.DestinationRabbitMQ = destinationRabbitMQ
		u.Type = DestinationTypeRabbitmq
		return nil
	case "hookdeck":
		destinationHookdeck := new(DestinationHookdeck)
		if err := utils.UnmarshalJSON(data, &destinationHookdeck, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == hookdeck) type DestinationHookdeck within Destination: %w", string(data), err)
		}

		u.DestinationHookdeck = destinationHookdeck
		u.Type = DestinationTypeHookdeck
		return nil
	case "aws_kinesis":
		destinationAWSKinesis := new(DestinationAWSKinesis)
		if err := utils.UnmarshalJSON(data, &destinationAWSKinesis, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == aws_kinesis) type DestinationAWSKinesis within Destination: %w", string(data), err)
		}

		u.DestinationAWSKinesis = destinationAWSKinesis
		u.Type = DestinationTypeAwsKinesis
		return nil
	case "azure_servicebus":
		destinationAzureServiceBus := new(DestinationAzureServiceBus)
		if err := utils.UnmarshalJSON(data, &destinationAzureServiceBus, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == azure_servicebus) type DestinationAzureServiceBus within Destination: %w", string(data), err)
		}

		u.DestinationAzureServiceBus = destinationAzureServiceBus
		u.Type = DestinationTypeAzureServicebus
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Destination", string(data))
}

func (u Destination) MarshalJSON() ([]byte, error) {
	if u.DestinationWebhook != nil {
		return utils.MarshalJSON(u.DestinationWebhook, "", true)
	}

	if u.DestinationAWSSQS != nil {
		return utils.MarshalJSON(u.DestinationAWSSQS, "", true)
	}

	if u.DestinationRabbitMQ != nil {
		return utils.MarshalJSON(u.DestinationRabbitMQ, "", true)
	}

	if u.DestinationHookdeck != nil {
		return utils.MarshalJSON(u.DestinationHookdeck, "", true)
	}

	if u.DestinationAWSKinesis != nil {
		return utils.MarshalJSON(u.DestinationAWSKinesis, "", true)
	}

	if u.DestinationAzureServiceBus != nil {
		return utils.MarshalJSON(u.DestinationAzureServiceBus, "", true)
	}

	return nil, errors.New("could not marshal union type Destination: all fields are null")
}
