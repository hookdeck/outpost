// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/hookdeck/outpost/sdks/outpost-go/internal/utils"
)

// TLS - Whether to use TLS connection (amqps). Defaults to "false".
type TLS string

const (
	TLSTrue  TLS = "true"
	TLSFalse TLS = "false"
)

func (e TLS) ToPointer() *TLS {
	return &e
}
func (e *TLS) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = TLS(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TLS: %v", v)
	}
}

type RabbitMQConfig struct {
	// RabbitMQ server address (host:port).
	ServerURL string `json:"server_url"`
	// The exchange to publish messages to.
	Exchange string `json:"exchange"`
	// Whether to use TLS connection (amqps). Defaults to "false".
	TLS *TLS `json:"tls,omitempty"`
}

func (r RabbitMQConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RabbitMQConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"server_url", "exchange"}); err != nil {
		return err
	}
	return nil
}

func (o *RabbitMQConfig) GetServerURL() string {
	if o == nil {
		return ""
	}
	return o.ServerURL
}

func (o *RabbitMQConfig) GetExchange() string {
	if o == nil {
		return ""
	}
	return o.Exchange
}

func (o *RabbitMQConfig) GetTLS() *TLS {
	if o == nil {
		return nil
	}
	return o.TLS
}
