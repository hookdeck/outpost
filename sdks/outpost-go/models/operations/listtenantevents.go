// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/hookdeck/outpost/sdks/outpost-go/internal/utils"
	"github.com/hookdeck/outpost/sdks/outpost-go/models/components"
	"time"
)

type ListTenantEventsGlobals struct {
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
}

func (o *ListTenantEventsGlobals) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

type DestinationIDType string

const (
	DestinationIDTypeStr        DestinationIDType = "str"
	DestinationIDTypeArrayOfStr DestinationIDType = "arrayOfStr"
)

// DestinationID - Filter events by destination ID(s).
type DestinationID struct {
	Str        *string  `queryParam:"inline" name:"destination_id"`
	ArrayOfStr []string `queryParam:"inline" name:"destination_id"`

	Type DestinationIDType
}

func CreateDestinationIDStr(str string) DestinationID {
	typ := DestinationIDTypeStr

	return DestinationID{
		Str:  &str,
		Type: typ,
	}
}

func CreateDestinationIDArrayOfStr(arrayOfStr []string) DestinationID {
	typ := DestinationIDTypeArrayOfStr

	return DestinationID{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *DestinationID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = DestinationIDTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = DestinationIDTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DestinationID", string(data))
}

func (u DestinationID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type DestinationID: all fields are null")
}

// ListTenantEventsStatus - Filter events by delivery status.
type ListTenantEventsStatus string

const (
	ListTenantEventsStatusSuccess ListTenantEventsStatus = "success"
	ListTenantEventsStatusFailed  ListTenantEventsStatus = "failed"
)

func (e ListTenantEventsStatus) ToPointer() *ListTenantEventsStatus {
	return &e
}
func (e *ListTenantEventsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failed":
		*e = ListTenantEventsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTenantEventsStatus: %v", v)
	}
}

type ListTenantEventsRequest struct {
	// The ID of the tenant. Required when using AdminApiKey authentication.
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
	// Filter events by destination ID(s).
	DestinationID *DestinationID `queryParam:"style=form,explode=true,name=destination_id"`
	// Filter events by delivery status.
	Status *ListTenantEventsStatus `queryParam:"style=form,explode=true,name=status"`
	// Cursor for next page of results
	Next *string `queryParam:"style=form,explode=true,name=next"`
	// Cursor for previous page of results
	Prev *string `queryParam:"style=form,explode=true,name=prev"`
	// Number of items per page (default 100, max 1000)
	Limit *int64 `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Start time filter (RFC3339 format)
	Start *time.Time `queryParam:"style=form,explode=true,name=start"`
	// End time filter (RFC3339 format)
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
}

func (l ListTenantEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListTenantEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ListTenantEventsRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *ListTenantEventsRequest) GetDestinationID() *DestinationID {
	if o == nil {
		return nil
	}
	return o.DestinationID
}

func (o *ListTenantEventsRequest) GetStatus() *ListTenantEventsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListTenantEventsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListTenantEventsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *ListTenantEventsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListTenantEventsRequest) GetStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *ListTenantEventsRequest) GetEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.End
}

// ListTenantEventsResponseBody - A paginated list of events.
type ListTenantEventsResponseBody struct {
	// Total number of items across all pages
	Count int64              `json:"count"`
	Data  []components.Event `json:"data"`
	// Cursor for next page (empty string if no next page)
	Next string `json:"next"`
	// Cursor for previous page (empty string if no previous page)
	Prev string `json:"prev"`
}

func (o *ListTenantEventsResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListTenantEventsResponseBody) GetData() []components.Event {
	if o == nil {
		return []components.Event{}
	}
	return o.Data
}

func (o *ListTenantEventsResponseBody) GetNext() string {
	if o == nil {
		return ""
	}
	return o.Next
}

func (o *ListTenantEventsResponseBody) GetPrev() string {
	if o == nil {
		return ""
	}
	return o.Prev
}

type ListTenantEventsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A paginated list of events.
	Object *ListTenantEventsResponseBody
}

func (o *ListTenantEventsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListTenantEventsResponse) GetObject() *ListTenantEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
