// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/hookdeck/outpost/sdks/outpost-go/internal/utils"
	"github.com/hookdeck/outpost/sdks/outpost-go/models/components"
)

type UpdateTenantDestinationGlobals struct {
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
}

func (o *UpdateTenantDestinationGlobals) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

type UpdateTenantDestinationRequest struct {
	// The ID of the tenant. Required when using AdminApiKey authentication.
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
	// The ID of the destination.
	DestinationID     string                       `pathParam:"style=simple,explode=false,name=destination_id"`
	DestinationUpdate components.DestinationUpdate `request:"mediaType=application/json"`
}

func (o *UpdateTenantDestinationRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *UpdateTenantDestinationRequest) GetDestinationID() string {
	if o == nil {
		return ""
	}
	return o.DestinationID
}

func (o *UpdateTenantDestinationRequest) GetDestinationUpdate() components.DestinationUpdate {
	if o == nil {
		return components.DestinationUpdate{}
	}
	return o.DestinationUpdate
}

type UpdateTenantDestinationResponseBodyType string

const (
	UpdateTenantDestinationResponseBodyTypeDestination UpdateTenantDestinationResponseBodyType = "Destination"
)

// UpdateTenantDestinationResponseBody - Destination updated successfully or OAuth redirect needed.
type UpdateTenantDestinationResponseBody struct {
	Destination *components.Destination `queryParam:"inline" name:"ResponseBody"`

	Type UpdateTenantDestinationResponseBodyType
}

func CreateUpdateTenantDestinationResponseBodyDestination(destination components.Destination) UpdateTenantDestinationResponseBody {
	typ := UpdateTenantDestinationResponseBodyTypeDestination

	return UpdateTenantDestinationResponseBody{
		Destination: &destination,
		Type:        typ,
	}
}

func (u *UpdateTenantDestinationResponseBody) UnmarshalJSON(data []byte) error {

	var destination components.Destination = components.Destination{}
	if err := utils.UnmarshalJSON(data, &destination, "", true, nil); err == nil {
		u.Destination = &destination
		u.Type = UpdateTenantDestinationResponseBodyTypeDestination
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateTenantDestinationResponseBody", string(data))
}

func (u UpdateTenantDestinationResponseBody) MarshalJSON() ([]byte, error) {
	if u.Destination != nil {
		return utils.MarshalJSON(u.Destination, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateTenantDestinationResponseBody: all fields are null")
}

type UpdateTenantDestinationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Destination updated successfully or OAuth redirect needed.
	OneOf *UpdateTenantDestinationResponseBody
}

func (o *UpdateTenantDestinationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateTenantDestinationResponse) GetOneOf() *UpdateTenantDestinationResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
