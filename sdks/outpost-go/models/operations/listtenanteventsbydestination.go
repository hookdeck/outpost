// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/hookdeck/outpost/sdks/outpost-go/internal/utils"
	"github.com/hookdeck/outpost/sdks/outpost-go/models/components"
	"time"
)

type ListTenantEventsByDestinationGlobals struct {
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
}

func (o *ListTenantEventsByDestinationGlobals) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

// ListTenantEventsByDestinationStatus - Filter events by delivery status.
type ListTenantEventsByDestinationStatus string

const (
	ListTenantEventsByDestinationStatusSuccess ListTenantEventsByDestinationStatus = "success"
	ListTenantEventsByDestinationStatusFailed  ListTenantEventsByDestinationStatus = "failed"
)

func (e ListTenantEventsByDestinationStatus) ToPointer() *ListTenantEventsByDestinationStatus {
	return &e
}
func (e *ListTenantEventsByDestinationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failed":
		*e = ListTenantEventsByDestinationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTenantEventsByDestinationStatus: %v", v)
	}
}

type ListTenantEventsByDestinationRequest struct {
	// The ID of the tenant. Required when using AdminApiKey authentication.
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
	// The ID of the destination.
	DestinationID string `pathParam:"style=simple,explode=false,name=destination_id"`
	// Filter events by delivery status.
	Status *ListTenantEventsByDestinationStatus `queryParam:"style=form,explode=true,name=status"`
	// Cursor for next page of results
	Next *string `queryParam:"style=form,explode=true,name=next"`
	// Cursor for previous page of results
	Prev *string `queryParam:"style=form,explode=true,name=prev"`
	// Number of items per page (default 100, max 1000)
	Limit *int64 `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Start time filter (RFC3339 format)
	Start *time.Time `queryParam:"style=form,explode=true,name=start"`
	// End time filter (RFC3339 format)
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
}

func (l ListTenantEventsByDestinationRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListTenantEventsByDestinationRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"destination_id"}); err != nil {
		return err
	}
	return nil
}

func (o *ListTenantEventsByDestinationRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *ListTenantEventsByDestinationRequest) GetDestinationID() string {
	if o == nil {
		return ""
	}
	return o.DestinationID
}

func (o *ListTenantEventsByDestinationRequest) GetStatus() *ListTenantEventsByDestinationStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListTenantEventsByDestinationRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListTenantEventsByDestinationRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *ListTenantEventsByDestinationRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListTenantEventsByDestinationRequest) GetStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *ListTenantEventsByDestinationRequest) GetEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.End
}

// ListTenantEventsByDestinationResponseBody - A paginated list of events for the destination.
type ListTenantEventsByDestinationResponseBody struct {
	// Total number of items across all pages
	Count int64              `json:"count"`
	Data  []components.Event `json:"data"`
	// Cursor for next page (empty string if no next page)
	Next string `json:"next"`
	// Cursor for previous page (empty string if no previous page)
	Prev string `json:"prev"`
}

func (o *ListTenantEventsByDestinationResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListTenantEventsByDestinationResponseBody) GetData() []components.Event {
	if o == nil {
		return []components.Event{}
	}
	return o.Data
}

func (o *ListTenantEventsByDestinationResponseBody) GetNext() string {
	if o == nil {
		return ""
	}
	return o.Next
}

func (o *ListTenantEventsByDestinationResponseBody) GetPrev() string {
	if o == nil {
		return ""
	}
	return o.Prev
}

type ListTenantEventsByDestinationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A paginated list of events for the destination.
	Object *ListTenantEventsByDestinationResponseBody
}

func (o *ListTenantEventsByDestinationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListTenantEventsByDestinationResponse) GetObject() *ListTenantEventsByDestinationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
