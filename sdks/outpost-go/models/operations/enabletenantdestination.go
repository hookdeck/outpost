// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/hookdeck/outpost/sdks/outpost-go/models/components"
)

type EnableTenantDestinationGlobals struct {
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
}

func (o *EnableTenantDestinationGlobals) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

type EnableTenantDestinationRequest struct {
	// The ID of the tenant. Required when using AdminApiKey authentication.
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
	// The ID of the destination.
	DestinationID string `pathParam:"style=simple,explode=false,name=destination_id"`
}

func (o *EnableTenantDestinationRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *EnableTenantDestinationRequest) GetDestinationID() string {
	if o == nil {
		return ""
	}
	return o.DestinationID
}

type EnableTenantDestinationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Destination enabled successfully.
	Destination *components.Destination
}

func (o *EnableTenantDestinationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *EnableTenantDestinationResponse) GetDestination() *components.Destination {
	if o == nil {
		return nil
	}
	return o.Destination
}

func (o *EnableTenantDestinationResponse) GetDestinationWebhook() *components.DestinationWebhook {
	if v := o.GetDestination(); v != nil {
		return v.DestinationWebhook
	}
	return nil
}

func (o *EnableTenantDestinationResponse) GetDestinationAwsSqs() *components.DestinationAWSSQS {
	if v := o.GetDestination(); v != nil {
		return v.DestinationAWSSQS
	}
	return nil
}

func (o *EnableTenantDestinationResponse) GetDestinationRabbitmq() *components.DestinationRabbitMQ {
	if v := o.GetDestination(); v != nil {
		return v.DestinationRabbitMQ
	}
	return nil
}

func (o *EnableTenantDestinationResponse) GetDestinationHookdeck() *components.DestinationHookdeck {
	if v := o.GetDestination(); v != nil {
		return v.DestinationHookdeck
	}
	return nil
}

func (o *EnableTenantDestinationResponse) GetDestinationAwsKinesis() *components.DestinationAWSKinesis {
	if v := o.GetDestination(); v != nil {
		return v.DestinationAWSKinesis
	}
	return nil
}

func (o *EnableTenantDestinationResponse) GetDestinationAzureServicebus() *components.DestinationAzureServiceBus {
	if v := o.GetDestination(); v != nil {
		return v.DestinationAzureServiceBus
	}
	return nil
}
