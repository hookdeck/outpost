/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AWSKinesisConfig,
  AWSKinesisConfig$inboundSchema,
  AWSKinesisConfig$Outbound,
  AWSKinesisConfig$outboundSchema,
} from "./awskinesisconfig.js";
import {
  AWSKinesisCredentials,
  AWSKinesisCredentials$inboundSchema,
  AWSKinesisCredentials$Outbound,
  AWSKinesisCredentials$outboundSchema,
} from "./awskinesiscredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

/**
 * Type of the destination.
 */
export const DestinationAWSKinesisType = {
  AwsKinesis: "aws_kinesis",
} as const;
/**
 * Type of the destination.
 */
export type DestinationAWSKinesisType = ClosedEnum<
  typeof DestinationAWSKinesisType
>;

export type DestinationAWSKinesis = {
  /**
   * Control plane generated ID or user provided ID for the destination.
   */
  id: string;
  /**
   * Type of the destination.
   */
  type: DestinationAWSKinesisType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  /**
   * ISO Date when the destination was disabled, or null if enabled.
   */
  disabledAt: Date | null;
  /**
   * ISO Date when the destination was created.
   */
  createdAt: Date;
  config: AWSKinesisConfig;
  credentials: AWSKinesisCredentials;
  /**
   * A human-readable representation of the destination target (Kinesis stream name). Read-only.
   */
  target?: string | undefined;
  /**
   * A URL link to the destination target (AWS Console link to the stream). Read-only.
   */
  targetUrl?: string | null | undefined;
};

/** @internal */
export const DestinationAWSKinesisType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationAWSKinesisType
> = z.nativeEnum(DestinationAWSKinesisType);

/** @internal */
export const DestinationAWSKinesisType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationAWSKinesisType
> = DestinationAWSKinesisType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationAWSKinesisType$ {
  /** @deprecated use `DestinationAWSKinesisType$inboundSchema` instead. */
  export const inboundSchema = DestinationAWSKinesisType$inboundSchema;
  /** @deprecated use `DestinationAWSKinesisType$outboundSchema` instead. */
  export const outboundSchema = DestinationAWSKinesisType$outboundSchema;
}

/** @internal */
export const DestinationAWSKinesis$inboundSchema: z.ZodType<
  DestinationAWSKinesis,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: DestinationAWSKinesisType$inboundSchema,
  topics: Topics$inboundSchema,
  disabled_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  config: AWSKinesisConfig$inboundSchema,
  credentials: AWSKinesisCredentials$inboundSchema,
  target: z.string().optional(),
  target_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "disabled_at": "disabledAt",
    "created_at": "createdAt",
    "target_url": "targetUrl",
  });
});

/** @internal */
export type DestinationAWSKinesis$Outbound = {
  id: string;
  type: string;
  topics: Topics$Outbound;
  disabled_at: string | null;
  created_at: string;
  config: AWSKinesisConfig$Outbound;
  credentials: AWSKinesisCredentials$Outbound;
  target?: string | undefined;
  target_url?: string | null | undefined;
};

/** @internal */
export const DestinationAWSKinesis$outboundSchema: z.ZodType<
  DestinationAWSKinesis$Outbound,
  z.ZodTypeDef,
  DestinationAWSKinesis
> = z.object({
  id: z.string(),
  type: DestinationAWSKinesisType$outboundSchema,
  topics: Topics$outboundSchema,
  disabledAt: z.nullable(z.date().transform(v => v.toISOString())),
  createdAt: z.date().transform(v => v.toISOString()),
  config: AWSKinesisConfig$outboundSchema,
  credentials: AWSKinesisCredentials$outboundSchema,
  target: z.string().optional(),
  targetUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    disabledAt: "disabled_at",
    createdAt: "created_at",
    targetUrl: "target_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationAWSKinesis$ {
  /** @deprecated use `DestinationAWSKinesis$inboundSchema` instead. */
  export const inboundSchema = DestinationAWSKinesis$inboundSchema;
  /** @deprecated use `DestinationAWSKinesis$outboundSchema` instead. */
  export const outboundSchema = DestinationAWSKinesis$outboundSchema;
  /** @deprecated use `DestinationAWSKinesis$Outbound` instead. */
  export type Outbound = DestinationAWSKinesis$Outbound;
}

export function destinationAWSKinesisToJSON(
  destinationAWSKinesis: DestinationAWSKinesis,
): string {
  return JSON.stringify(
    DestinationAWSKinesis$outboundSchema.parse(destinationAWSKinesis),
  );
}

export function destinationAWSKinesisFromJSON(
  jsonString: string,
): SafeParseResult<DestinationAWSKinesis, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationAWSKinesis$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationAWSKinesis' from JSON`,
  );
}
