/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HookdeckCredentials,
  HookdeckCredentials$inboundSchema,
  HookdeckCredentials$Outbound,
  HookdeckCredentials$outboundSchema,
} from "./hookdeckcredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

/**
 * Type of the destination. Must be 'hookdeck'.
 */
export const DestinationCreateHookdeckType = {
  Hookdeck: "hookdeck",
} as const;
/**
 * Type of the destination. Must be 'hookdeck'.
 */
export type DestinationCreateHookdeckType = ClosedEnum<
  typeof DestinationCreateHookdeckType
>;

export type DestinationCreateHookdeck = {
  /**
   * Optional user-provided ID. A UUID will be generated if empty.
   */
  id?: string | undefined;
  /**
   * Type of the destination. Must be 'hookdeck'.
   */
  type: DestinationCreateHookdeckType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  config?: any | undefined;
  credentials: HookdeckCredentials;
};

/** @internal */
export const DestinationCreateHookdeckType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateHookdeckType
> = z.nativeEnum(DestinationCreateHookdeckType);

/** @internal */
export const DestinationCreateHookdeckType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateHookdeckType
> = DestinationCreateHookdeckType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateHookdeckType$ {
  /** @deprecated use `DestinationCreateHookdeckType$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateHookdeckType$inboundSchema;
  /** @deprecated use `DestinationCreateHookdeckType$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateHookdeckType$outboundSchema;
}

/** @internal */
export const DestinationCreateHookdeck$inboundSchema: z.ZodType<
  DestinationCreateHookdeck,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateHookdeckType$inboundSchema,
  topics: Topics$inboundSchema,
  config: z.any().optional(),
  credentials: HookdeckCredentials$inboundSchema,
});

/** @internal */
export type DestinationCreateHookdeck$Outbound = {
  id?: string | undefined;
  type: string;
  topics: Topics$Outbound;
  config?: any | undefined;
  credentials: HookdeckCredentials$Outbound;
};

/** @internal */
export const DestinationCreateHookdeck$outboundSchema: z.ZodType<
  DestinationCreateHookdeck$Outbound,
  z.ZodTypeDef,
  DestinationCreateHookdeck
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateHookdeckType$outboundSchema,
  topics: Topics$outboundSchema,
  config: z.any().optional(),
  credentials: HookdeckCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateHookdeck$ {
  /** @deprecated use `DestinationCreateHookdeck$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateHookdeck$inboundSchema;
  /** @deprecated use `DestinationCreateHookdeck$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateHookdeck$outboundSchema;
  /** @deprecated use `DestinationCreateHookdeck$Outbound` instead. */
  export type Outbound = DestinationCreateHookdeck$Outbound;
}

export function destinationCreateHookdeckToJSON(
  destinationCreateHookdeck: DestinationCreateHookdeck,
): string {
  return JSON.stringify(
    DestinationCreateHookdeck$outboundSchema.parse(destinationCreateHookdeck),
  );
}

export function destinationCreateHookdeckFromJSON(
  jsonString: string,
): SafeParseResult<DestinationCreateHookdeck, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationCreateHookdeck$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationCreateHookdeck' from JSON`,
  );
}
