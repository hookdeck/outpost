/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AWSSQSConfig,
  AWSSQSConfig$inboundSchema,
  AWSSQSConfig$Outbound,
  AWSSQSConfig$outboundSchema,
} from "./awssqsconfig.js";
import {
  AWSSQSCredentials,
  AWSSQSCredentials$inboundSchema,
  AWSSQSCredentials$Outbound,
  AWSSQSCredentials$outboundSchema,
} from "./awssqscredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

/**
 * Type of the destination.
 */
export const DestinationAWSSQSType = {
  AwsSqs: "aws_sqs",
} as const;
/**
 * Type of the destination.
 */
export type DestinationAWSSQSType = ClosedEnum<typeof DestinationAWSSQSType>;

export type DestinationAWSSQS = {
  /**
   * Control plane generated ID or user provided ID for the destination.
   */
  id: string;
  /**
   * Type of the destination.
   */
  type: DestinationAWSSQSType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  /**
   * ISO Date when the destination was disabled, or null if enabled.
   */
  disabledAt: Date | null;
  /**
   * ISO Date when the destination was created.
   */
  createdAt: Date;
  config: AWSSQSConfig;
  credentials: AWSSQSCredentials;
  /**
   * A human-readable representation of the destination target (SQS queue name). Read-only.
   */
  target?: string | undefined;
  /**
   * A URL link to the destination target (AWS Console link to the queue). Read-only.
   */
  targetUrl?: string | null | undefined;
};

/** @internal */
export const DestinationAWSSQSType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationAWSSQSType
> = z.nativeEnum(DestinationAWSSQSType);

/** @internal */
export const DestinationAWSSQSType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationAWSSQSType
> = DestinationAWSSQSType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationAWSSQSType$ {
  /** @deprecated use `DestinationAWSSQSType$inboundSchema` instead. */
  export const inboundSchema = DestinationAWSSQSType$inboundSchema;
  /** @deprecated use `DestinationAWSSQSType$outboundSchema` instead. */
  export const outboundSchema = DestinationAWSSQSType$outboundSchema;
}

/** @internal */
export const DestinationAWSSQS$inboundSchema: z.ZodType<
  DestinationAWSSQS,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: DestinationAWSSQSType$inboundSchema,
  topics: Topics$inboundSchema,
  disabled_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  config: AWSSQSConfig$inboundSchema,
  credentials: AWSSQSCredentials$inboundSchema,
  target: z.string().optional(),
  target_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "disabled_at": "disabledAt",
    "created_at": "createdAt",
    "target_url": "targetUrl",
  });
});

/** @internal */
export type DestinationAWSSQS$Outbound = {
  id: string;
  type: string;
  topics: Topics$Outbound;
  disabled_at: string | null;
  created_at: string;
  config: AWSSQSConfig$Outbound;
  credentials: AWSSQSCredentials$Outbound;
  target?: string | undefined;
  target_url?: string | null | undefined;
};

/** @internal */
export const DestinationAWSSQS$outboundSchema: z.ZodType<
  DestinationAWSSQS$Outbound,
  z.ZodTypeDef,
  DestinationAWSSQS
> = z.object({
  id: z.string(),
  type: DestinationAWSSQSType$outboundSchema,
  topics: Topics$outboundSchema,
  disabledAt: z.nullable(z.date().transform(v => v.toISOString())),
  createdAt: z.date().transform(v => v.toISOString()),
  config: AWSSQSConfig$outboundSchema,
  credentials: AWSSQSCredentials$outboundSchema,
  target: z.string().optional(),
  targetUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    disabledAt: "disabled_at",
    createdAt: "created_at",
    targetUrl: "target_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationAWSSQS$ {
  /** @deprecated use `DestinationAWSSQS$inboundSchema` instead. */
  export const inboundSchema = DestinationAWSSQS$inboundSchema;
  /** @deprecated use `DestinationAWSSQS$outboundSchema` instead. */
  export const outboundSchema = DestinationAWSSQS$outboundSchema;
  /** @deprecated use `DestinationAWSSQS$Outbound` instead. */
  export type Outbound = DestinationAWSSQS$Outbound;
}

export function destinationAWSSQSToJSON(
  destinationAWSSQS: DestinationAWSSQS,
): string {
  return JSON.stringify(
    DestinationAWSSQS$outboundSchema.parse(destinationAWSSQS),
  );
}

export function destinationAWSSQSFromJSON(
  jsonString: string,
): SafeParseResult<DestinationAWSSQS, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationAWSSQS$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationAWSSQS' from JSON`,
  );
}
