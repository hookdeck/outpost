/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HookdeckCredentials,
  HookdeckCredentials$inboundSchema,
  HookdeckCredentials$Outbound,
  HookdeckCredentials$outboundSchema,
} from "./hookdeckcredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

export type DestinationUpdateHookdeck = {
  /**
   * "*" or an array of enabled topics.
   */
  topics?: Topics | undefined;
  config?: any | undefined;
  credentials?: HookdeckCredentials | undefined;
};

/** @internal */
export const DestinationUpdateHookdeck$inboundSchema: z.ZodType<
  DestinationUpdateHookdeck,
  z.ZodTypeDef,
  unknown
> = z.object({
  topics: Topics$inboundSchema.optional(),
  config: z.any().optional(),
  credentials: HookdeckCredentials$inboundSchema.optional(),
});

/** @internal */
export type DestinationUpdateHookdeck$Outbound = {
  topics?: Topics$Outbound | undefined;
  config?: any | undefined;
  credentials?: HookdeckCredentials$Outbound | undefined;
};

/** @internal */
export const DestinationUpdateHookdeck$outboundSchema: z.ZodType<
  DestinationUpdateHookdeck$Outbound,
  z.ZodTypeDef,
  DestinationUpdateHookdeck
> = z.object({
  topics: Topics$outboundSchema.optional(),
  config: z.any().optional(),
  credentials: HookdeckCredentials$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationUpdateHookdeck$ {
  /** @deprecated use `DestinationUpdateHookdeck$inboundSchema` instead. */
  export const inboundSchema = DestinationUpdateHookdeck$inboundSchema;
  /** @deprecated use `DestinationUpdateHookdeck$outboundSchema` instead. */
  export const outboundSchema = DestinationUpdateHookdeck$outboundSchema;
  /** @deprecated use `DestinationUpdateHookdeck$Outbound` instead. */
  export type Outbound = DestinationUpdateHookdeck$Outbound;
}

export function destinationUpdateHookdeckToJSON(
  destinationUpdateHookdeck: DestinationUpdateHookdeck,
): string {
  return JSON.stringify(
    DestinationUpdateHookdeck$outboundSchema.parse(destinationUpdateHookdeck),
  );
}

export function destinationUpdateHookdeckFromJSON(
  jsonString: string,
): SafeParseResult<DestinationUpdateHookdeck, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationUpdateHookdeck$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationUpdateHookdeck' from JSON`,
  );
}
