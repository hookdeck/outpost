/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";
import {
  WebhookConfig,
  WebhookConfig$inboundSchema,
  WebhookConfig$Outbound,
  WebhookConfig$outboundSchema,
} from "./webhookconfig.js";
import {
  WebhookCredentials,
  WebhookCredentials$inboundSchema,
  WebhookCredentials$Outbound,
  WebhookCredentials$outboundSchema,
} from "./webhookcredentials.js";

/**
 * Type of the destination.
 */
export const DestinationWebhookType = {
  Webhook: "webhook",
} as const;
/**
 * Type of the destination.
 */
export type DestinationWebhookType = ClosedEnum<typeof DestinationWebhookType>;

export type DestinationWebhook = {
  /**
   * Control plane generated ID or user provided ID for the destination.
   */
  id: string;
  /**
   * Type of the destination.
   */
  type: DestinationWebhookType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  /**
   * ISO Date when the destination was disabled, or null if enabled.
   */
  disabledAt: Date | null;
  /**
   * ISO Date when the destination was created.
   */
  createdAt: Date;
  config: WebhookConfig;
  credentials: WebhookCredentials;
  /**
   * A human-readable representation of the destination target (e.g., URL host). Read-only.
   */
  target?: string | undefined;
  /**
   * A URL link to the destination target (the webhook URL). Read-only.
   */
  targetUrl?: string | null | undefined;
};

/** @internal */
export const DestinationWebhookType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationWebhookType
> = z.nativeEnum(DestinationWebhookType);

/** @internal */
export const DestinationWebhookType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationWebhookType
> = DestinationWebhookType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationWebhookType$ {
  /** @deprecated use `DestinationWebhookType$inboundSchema` instead. */
  export const inboundSchema = DestinationWebhookType$inboundSchema;
  /** @deprecated use `DestinationWebhookType$outboundSchema` instead. */
  export const outboundSchema = DestinationWebhookType$outboundSchema;
}

/** @internal */
export const DestinationWebhook$inboundSchema: z.ZodType<
  DestinationWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: DestinationWebhookType$inboundSchema,
  topics: Topics$inboundSchema,
  disabled_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  config: WebhookConfig$inboundSchema,
  credentials: WebhookCredentials$inboundSchema,
  target: z.string().optional(),
  target_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "disabled_at": "disabledAt",
    "created_at": "createdAt",
    "target_url": "targetUrl",
  });
});

/** @internal */
export type DestinationWebhook$Outbound = {
  id: string;
  type: string;
  topics: Topics$Outbound;
  disabled_at: string | null;
  created_at: string;
  config: WebhookConfig$Outbound;
  credentials: WebhookCredentials$Outbound;
  target?: string | undefined;
  target_url?: string | null | undefined;
};

/** @internal */
export const DestinationWebhook$outboundSchema: z.ZodType<
  DestinationWebhook$Outbound,
  z.ZodTypeDef,
  DestinationWebhook
> = z.object({
  id: z.string(),
  type: DestinationWebhookType$outboundSchema,
  topics: Topics$outboundSchema,
  disabledAt: z.nullable(z.date().transform(v => v.toISOString())),
  createdAt: z.date().transform(v => v.toISOString()),
  config: WebhookConfig$outboundSchema,
  credentials: WebhookCredentials$outboundSchema,
  target: z.string().optional(),
  targetUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    disabledAt: "disabled_at",
    createdAt: "created_at",
    targetUrl: "target_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationWebhook$ {
  /** @deprecated use `DestinationWebhook$inboundSchema` instead. */
  export const inboundSchema = DestinationWebhook$inboundSchema;
  /** @deprecated use `DestinationWebhook$outboundSchema` instead. */
  export const outboundSchema = DestinationWebhook$outboundSchema;
  /** @deprecated use `DestinationWebhook$Outbound` instead. */
  export type Outbound = DestinationWebhook$Outbound;
}

export function destinationWebhookToJSON(
  destinationWebhook: DestinationWebhook,
): string {
  return JSON.stringify(
    DestinationWebhook$outboundSchema.parse(destinationWebhook),
  );
}

export function destinationWebhookFromJSON(
  jsonString: string,
): SafeParseResult<DestinationWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationWebhook' from JSON`,
  );
}
