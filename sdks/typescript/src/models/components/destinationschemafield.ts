/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DestinationSchemaFieldType = {
  Text: "text",
  Checkbox: "checkbox",
} as const;
export type DestinationSchemaFieldType = ClosedEnum<
  typeof DestinationSchemaFieldType
>;

export type DestinationSchemaField = {
  type: DestinationSchemaFieldType;
  label?: string | undefined;
  description?: string | undefined;
  required: boolean;
  /**
   * Indicates if the field contains sensitive information.
   */
  sensitive?: boolean | undefined;
  /**
   * Default value for the field.
   */
  default?: string | undefined;
  /**
   * Minimum length for a text input.
   */
  minlength?: number | undefined;
  /**
   * Maximum length for a text input.
   */
  maxlength?: number | undefined;
  /**
   * Regex pattern for validation (compatible with HTML5 pattern attribute).
   */
  pattern?: string | undefined;
};

/** @internal */
export const DestinationSchemaFieldType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationSchemaFieldType
> = z.nativeEnum(DestinationSchemaFieldType);

/** @internal */
export const DestinationSchemaFieldType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationSchemaFieldType
> = DestinationSchemaFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationSchemaFieldType$ {
  /** @deprecated use `DestinationSchemaFieldType$inboundSchema` instead. */
  export const inboundSchema = DestinationSchemaFieldType$inboundSchema;
  /** @deprecated use `DestinationSchemaFieldType$outboundSchema` instead. */
  export const outboundSchema = DestinationSchemaFieldType$outboundSchema;
}

/** @internal */
export const DestinationSchemaField$inboundSchema: z.ZodType<
  DestinationSchemaField,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DestinationSchemaFieldType$inboundSchema,
  label: z.string().optional(),
  description: z.string().optional(),
  required: z.boolean(),
  sensitive: z.boolean().optional(),
  default: z.string().optional(),
  minlength: z.number().int().optional(),
  maxlength: z.number().int().optional(),
  pattern: z.string().optional(),
});

/** @internal */
export type DestinationSchemaField$Outbound = {
  type: string;
  label?: string | undefined;
  description?: string | undefined;
  required: boolean;
  sensitive?: boolean | undefined;
  default?: string | undefined;
  minlength?: number | undefined;
  maxlength?: number | undefined;
  pattern?: string | undefined;
};

/** @internal */
export const DestinationSchemaField$outboundSchema: z.ZodType<
  DestinationSchemaField$Outbound,
  z.ZodTypeDef,
  DestinationSchemaField
> = z.object({
  type: DestinationSchemaFieldType$outboundSchema,
  label: z.string().optional(),
  description: z.string().optional(),
  required: z.boolean(),
  sensitive: z.boolean().optional(),
  default: z.string().optional(),
  minlength: z.number().int().optional(),
  maxlength: z.number().int().optional(),
  pattern: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationSchemaField$ {
  /** @deprecated use `DestinationSchemaField$inboundSchema` instead. */
  export const inboundSchema = DestinationSchemaField$inboundSchema;
  /** @deprecated use `DestinationSchemaField$outboundSchema` instead. */
  export const outboundSchema = DestinationSchemaField$outboundSchema;
  /** @deprecated use `DestinationSchemaField$Outbound` instead. */
  export type Outbound = DestinationSchemaField$Outbound;
}

export function destinationSchemaFieldToJSON(
  destinationSchemaField: DestinationSchemaField,
): string {
  return JSON.stringify(
    DestinationSchemaField$outboundSchema.parse(destinationSchemaField),
  );
}

export function destinationSchemaFieldFromJSON(
  jsonString: string,
): SafeParseResult<DestinationSchemaField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationSchemaField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationSchemaField' from JSON`,
  );
}
