/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AWSKinesisConfig,
  AWSKinesisConfig$inboundSchema,
  AWSKinesisConfig$Outbound,
  AWSKinesisConfig$outboundSchema,
} from "./awskinesisconfig.js";
import {
  AWSKinesisCredentials,
  AWSKinesisCredentials$inboundSchema,
  AWSKinesisCredentials$Outbound,
  AWSKinesisCredentials$outboundSchema,
} from "./awskinesiscredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

/**
 * Type of the destination. Must be 'aws_kinesis'.
 */
export const DestinationCreateAWSKinesisType = {
  AwsKinesis: "aws_kinesis",
} as const;
/**
 * Type of the destination. Must be 'aws_kinesis'.
 */
export type DestinationCreateAWSKinesisType = ClosedEnum<
  typeof DestinationCreateAWSKinesisType
>;

export type DestinationCreateAWSKinesis = {
  /**
   * Optional user-provided ID. A UUID will be generated if empty.
   */
  id?: string | undefined;
  /**
   * Type of the destination. Must be 'aws_kinesis'.
   */
  type: DestinationCreateAWSKinesisType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  config: AWSKinesisConfig;
  credentials: AWSKinesisCredentials;
};

/** @internal */
export const DestinationCreateAWSKinesisType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateAWSKinesisType
> = z.nativeEnum(DestinationCreateAWSKinesisType);

/** @internal */
export const DestinationCreateAWSKinesisType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateAWSKinesisType
> = DestinationCreateAWSKinesisType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateAWSKinesisType$ {
  /** @deprecated use `DestinationCreateAWSKinesisType$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateAWSKinesisType$inboundSchema;
  /** @deprecated use `DestinationCreateAWSKinesisType$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateAWSKinesisType$outboundSchema;
}

/** @internal */
export const DestinationCreateAWSKinesis$inboundSchema: z.ZodType<
  DestinationCreateAWSKinesis,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateAWSKinesisType$inboundSchema,
  topics: Topics$inboundSchema,
  config: AWSKinesisConfig$inboundSchema,
  credentials: AWSKinesisCredentials$inboundSchema,
});

/** @internal */
export type DestinationCreateAWSKinesis$Outbound = {
  id?: string | undefined;
  type: string;
  topics: Topics$Outbound;
  config: AWSKinesisConfig$Outbound;
  credentials: AWSKinesisCredentials$Outbound;
};

/** @internal */
export const DestinationCreateAWSKinesis$outboundSchema: z.ZodType<
  DestinationCreateAWSKinesis$Outbound,
  z.ZodTypeDef,
  DestinationCreateAWSKinesis
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateAWSKinesisType$outboundSchema,
  topics: Topics$outboundSchema,
  config: AWSKinesisConfig$outboundSchema,
  credentials: AWSKinesisCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateAWSKinesis$ {
  /** @deprecated use `DestinationCreateAWSKinesis$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateAWSKinesis$inboundSchema;
  /** @deprecated use `DestinationCreateAWSKinesis$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateAWSKinesis$outboundSchema;
  /** @deprecated use `DestinationCreateAWSKinesis$Outbound` instead. */
  export type Outbound = DestinationCreateAWSKinesis$Outbound;
}

export function destinationCreateAWSKinesisToJSON(
  destinationCreateAWSKinesis: DestinationCreateAWSKinesis,
): string {
  return JSON.stringify(
    DestinationCreateAWSKinesis$outboundSchema.parse(
      destinationCreateAWSKinesis,
    ),
  );
}

export function destinationCreateAWSKinesisFromJSON(
  jsonString: string,
): SafeParseResult<DestinationCreateAWSKinesis, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationCreateAWSKinesis$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationCreateAWSKinesis' from JSON`,
  );
}
