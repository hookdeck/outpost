/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DestinationAWSKinesis,
  DestinationAWSKinesis$inboundSchema,
  DestinationAWSKinesis$Outbound,
  DestinationAWSKinesis$outboundSchema,
} from "./destinationawskinesis.js";
import {
  DestinationAWSSQS,
  DestinationAWSSQS$inboundSchema,
  DestinationAWSSQS$Outbound,
  DestinationAWSSQS$outboundSchema,
} from "./destinationawssqs.js";
import {
  DestinationHookdeck,
  DestinationHookdeck$inboundSchema,
  DestinationHookdeck$Outbound,
  DestinationHookdeck$outboundSchema,
} from "./destinationhookdeck.js";
import {
  DestinationRabbitMQ,
  DestinationRabbitMQ$inboundSchema,
  DestinationRabbitMQ$Outbound,
  DestinationRabbitMQ$outboundSchema,
} from "./destinationrabbitmq.js";
import {
  DestinationWebhook,
  DestinationWebhook$inboundSchema,
  DestinationWebhook$Outbound,
  DestinationWebhook$outboundSchema,
} from "./destinationwebhook.js";

export type Destination =
  | (DestinationWebhook & { type: "webhook" })
  | (DestinationAWSSQS & { type: "aws_sqs" })
  | (DestinationRabbitMQ & { type: "rabbitmq" })
  | (DestinationHookdeck & { type: "hookdeck" })
  | (DestinationAWSKinesis & { type: "aws_kinesis" });

/** @internal */
export const Destination$inboundSchema: z.ZodType<
  Destination,
  z.ZodTypeDef,
  unknown
> = z.union([
  DestinationWebhook$inboundSchema.and(
    z.object({ type: z.literal("webhook") }).transform((v) => ({
      type: v.type,
    })),
  ),
  DestinationAWSSQS$inboundSchema.and(
    z.object({ type: z.literal("aws_sqs") }).transform((v) => ({
      type: v.type,
    })),
  ),
  DestinationRabbitMQ$inboundSchema.and(
    z.object({ type: z.literal("rabbitmq") }).transform((v) => ({
      type: v.type,
    })),
  ),
  DestinationHookdeck$inboundSchema.and(
    z.object({ type: z.literal("hookdeck") }).transform((v) => ({
      type: v.type,
    })),
  ),
  DestinationAWSKinesis$inboundSchema.and(
    z.object({ type: z.literal("aws_kinesis") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type Destination$Outbound =
  | (DestinationWebhook$Outbound & { type: "webhook" })
  | (DestinationAWSSQS$Outbound & { type: "aws_sqs" })
  | (DestinationRabbitMQ$Outbound & { type: "rabbitmq" })
  | (DestinationHookdeck$Outbound & { type: "hookdeck" })
  | (DestinationAWSKinesis$Outbound & { type: "aws_kinesis" });

/** @internal */
export const Destination$outboundSchema: z.ZodType<
  Destination$Outbound,
  z.ZodTypeDef,
  Destination
> = z.union([
  DestinationWebhook$outboundSchema.and(
    z.object({ type: z.literal("webhook") }).transform((v) => ({
      type: v.type,
    })),
  ),
  DestinationAWSSQS$outboundSchema.and(
    z.object({ type: z.literal("aws_sqs") }).transform((v) => ({
      type: v.type,
    })),
  ),
  DestinationRabbitMQ$outboundSchema.and(
    z.object({ type: z.literal("rabbitmq") }).transform((v) => ({
      type: v.type,
    })),
  ),
  DestinationHookdeck$outboundSchema.and(
    z.object({ type: z.literal("hookdeck") }).transform((v) => ({
      type: v.type,
    })),
  ),
  DestinationAWSKinesis$outboundSchema.and(
    z.object({ type: z.literal("aws_kinesis") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Destination$ {
  /** @deprecated use `Destination$inboundSchema` instead. */
  export const inboundSchema = Destination$inboundSchema;
  /** @deprecated use `Destination$outboundSchema` instead. */
  export const outboundSchema = Destination$outboundSchema;
  /** @deprecated use `Destination$Outbound` instead. */
  export type Outbound = Destination$Outbound;
}

export function destinationToJSON(destination: Destination): string {
  return JSON.stringify(Destination$outboundSchema.parse(destination));
}

export function destinationFromJSON(
  jsonString: string,
): SafeParseResult<Destination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Destination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Destination' from JSON`,
  );
}
