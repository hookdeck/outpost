/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTenantDestinationsGlobals = {
  tenantId?: string | undefined;
};

export type ListTenantDestinationsSecurity = {
  adminApiKey?: string | undefined;
  tenantJwt?: string | undefined;
};

export const ListTenantDestinationsTypeEnum2 = {
  Webhook: "webhook",
  AwsSqs: "aws_sqs",
  Rabbitmq: "rabbitmq",
  Hookdeck: "hookdeck",
  AwsKinesis: "aws_kinesis",
} as const;
export type ListTenantDestinationsTypeEnum2 = ClosedEnum<
  typeof ListTenantDestinationsTypeEnum2
>;

export const ListTenantDestinationsTypeEnum1 = {
  Webhook: "webhook",
  AwsSqs: "aws_sqs",
  Rabbitmq: "rabbitmq",
  Hookdeck: "hookdeck",
  AwsKinesis: "aws_kinesis",
} as const;
export type ListTenantDestinationsTypeEnum1 = ClosedEnum<
  typeof ListTenantDestinationsTypeEnum1
>;

/**
 * Filter destinations by type(s).
 */
export type Type =
  | ListTenantDestinationsTypeEnum1
  | Array<ListTenantDestinationsTypeEnum2>;

/**
 * Filter destinations by supported topic(s).
 */
export type Topics = string | Array<string>;

export type ListTenantDestinationsRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * Filter destinations by type(s).
   */
  type?:
    | ListTenantDestinationsTypeEnum1
    | Array<ListTenantDestinationsTypeEnum2>
    | undefined;
  /**
   * Filter destinations by supported topic(s).
   */
  topics?: string | Array<string> | undefined;
};

/** @internal */
export const ListTenantDestinationsGlobals$inboundSchema: z.ZodType<
  ListTenantDestinationsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListTenantDestinationsGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const ListTenantDestinationsGlobals$outboundSchema: z.ZodType<
  ListTenantDestinationsGlobals$Outbound,
  z.ZodTypeDef,
  ListTenantDestinationsGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantDestinationsGlobals$ {
  /** @deprecated use `ListTenantDestinationsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTenantDestinationsGlobals$inboundSchema;
  /** @deprecated use `ListTenantDestinationsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTenantDestinationsGlobals$outboundSchema;
  /** @deprecated use `ListTenantDestinationsGlobals$Outbound` instead. */
  export type Outbound = ListTenantDestinationsGlobals$Outbound;
}

export function listTenantDestinationsGlobalsToJSON(
  listTenantDestinationsGlobals: ListTenantDestinationsGlobals,
): string {
  return JSON.stringify(
    ListTenantDestinationsGlobals$outboundSchema.parse(
      listTenantDestinationsGlobals,
    ),
  );
}

export function listTenantDestinationsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantDestinationsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantDestinationsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantDestinationsGlobals' from JSON`,
  );
}

/** @internal */
export const ListTenantDestinationsSecurity$inboundSchema: z.ZodType<
  ListTenantDestinationsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdminApiKey: z.string().optional(),
  TenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "AdminApiKey": "adminApiKey",
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type ListTenantDestinationsSecurity$Outbound = {
  AdminApiKey?: string | undefined;
  TenantJwt?: string | undefined;
};

/** @internal */
export const ListTenantDestinationsSecurity$outboundSchema: z.ZodType<
  ListTenantDestinationsSecurity$Outbound,
  z.ZodTypeDef,
  ListTenantDestinationsSecurity
> = z.object({
  adminApiKey: z.string().optional(),
  tenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminApiKey: "AdminApiKey",
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantDestinationsSecurity$ {
  /** @deprecated use `ListTenantDestinationsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListTenantDestinationsSecurity$inboundSchema;
  /** @deprecated use `ListTenantDestinationsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListTenantDestinationsSecurity$outboundSchema;
  /** @deprecated use `ListTenantDestinationsSecurity$Outbound` instead. */
  export type Outbound = ListTenantDestinationsSecurity$Outbound;
}

export function listTenantDestinationsSecurityToJSON(
  listTenantDestinationsSecurity: ListTenantDestinationsSecurity,
): string {
  return JSON.stringify(
    ListTenantDestinationsSecurity$outboundSchema.parse(
      listTenantDestinationsSecurity,
    ),
  );
}

export function listTenantDestinationsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantDestinationsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantDestinationsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantDestinationsSecurity' from JSON`,
  );
}

/** @internal */
export const ListTenantDestinationsTypeEnum2$inboundSchema: z.ZodNativeEnum<
  typeof ListTenantDestinationsTypeEnum2
> = z.nativeEnum(ListTenantDestinationsTypeEnum2);

/** @internal */
export const ListTenantDestinationsTypeEnum2$outboundSchema: z.ZodNativeEnum<
  typeof ListTenantDestinationsTypeEnum2
> = ListTenantDestinationsTypeEnum2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantDestinationsTypeEnum2$ {
  /** @deprecated use `ListTenantDestinationsTypeEnum2$inboundSchema` instead. */
  export const inboundSchema = ListTenantDestinationsTypeEnum2$inboundSchema;
  /** @deprecated use `ListTenantDestinationsTypeEnum2$outboundSchema` instead. */
  export const outboundSchema = ListTenantDestinationsTypeEnum2$outboundSchema;
}

/** @internal */
export const ListTenantDestinationsTypeEnum1$inboundSchema: z.ZodNativeEnum<
  typeof ListTenantDestinationsTypeEnum1
> = z.nativeEnum(ListTenantDestinationsTypeEnum1);

/** @internal */
export const ListTenantDestinationsTypeEnum1$outboundSchema: z.ZodNativeEnum<
  typeof ListTenantDestinationsTypeEnum1
> = ListTenantDestinationsTypeEnum1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantDestinationsTypeEnum1$ {
  /** @deprecated use `ListTenantDestinationsTypeEnum1$inboundSchema` instead. */
  export const inboundSchema = ListTenantDestinationsTypeEnum1$inboundSchema;
  /** @deprecated use `ListTenantDestinationsTypeEnum1$outboundSchema` instead. */
  export const outboundSchema = ListTenantDestinationsTypeEnum1$outboundSchema;
}

/** @internal */
export const Type$inboundSchema: z.ZodType<Type, z.ZodTypeDef, unknown> = z
  .union([
    ListTenantDestinationsTypeEnum1$inboundSchema,
    z.array(ListTenantDestinationsTypeEnum2$inboundSchema),
  ]);

/** @internal */
export type Type$Outbound = string | Array<string>;

/** @internal */
export const Type$outboundSchema: z.ZodType<Type$Outbound, z.ZodTypeDef, Type> =
  z.union([
    ListTenantDestinationsTypeEnum1$outboundSchema,
    z.array(ListTenantDestinationsTypeEnum2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
  /** @deprecated use `Type$Outbound` instead. */
  export type Outbound = Type$Outbound;
}

export function typeToJSON(type: Type): string {
  return JSON.stringify(Type$outboundSchema.parse(type));
}

export function typeFromJSON(
  jsonString: string,
): SafeParseResult<Type, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Type$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Type' from JSON`,
  );
}

/** @internal */
export const Topics$inboundSchema: z.ZodType<Topics, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.array(z.string())]);

/** @internal */
export type Topics$Outbound = string | Array<string>;

/** @internal */
export const Topics$outboundSchema: z.ZodType<
  Topics$Outbound,
  z.ZodTypeDef,
  Topics
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Topics$ {
  /** @deprecated use `Topics$inboundSchema` instead. */
  export const inboundSchema = Topics$inboundSchema;
  /** @deprecated use `Topics$outboundSchema` instead. */
  export const outboundSchema = Topics$outboundSchema;
  /** @deprecated use `Topics$Outbound` instead. */
  export type Outbound = Topics$Outbound;
}

export function topicsToJSON(topics: Topics): string {
  return JSON.stringify(Topics$outboundSchema.parse(topics));
}

export function topicsFromJSON(
  jsonString: string,
): SafeParseResult<Topics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Topics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Topics' from JSON`,
  );
}

/** @internal */
export const ListTenantDestinationsRequest$inboundSchema: z.ZodType<
  ListTenantDestinationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  type: z.union([
    ListTenantDestinationsTypeEnum1$inboundSchema,
    z.array(ListTenantDestinationsTypeEnum2$inboundSchema),
  ]).optional(),
  topics: z.union([z.string(), z.array(z.string())]).optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListTenantDestinationsRequest$Outbound = {
  tenant_id?: string | undefined;
  type?: string | Array<string> | undefined;
  topics?: string | Array<string> | undefined;
};

/** @internal */
export const ListTenantDestinationsRequest$outboundSchema: z.ZodType<
  ListTenantDestinationsRequest$Outbound,
  z.ZodTypeDef,
  ListTenantDestinationsRequest
> = z.object({
  tenantId: z.string().optional(),
  type: z.union([
    ListTenantDestinationsTypeEnum1$outboundSchema,
    z.array(ListTenantDestinationsTypeEnum2$outboundSchema),
  ]).optional(),
  topics: z.union([z.string(), z.array(z.string())]).optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantDestinationsRequest$ {
  /** @deprecated use `ListTenantDestinationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTenantDestinationsRequest$inboundSchema;
  /** @deprecated use `ListTenantDestinationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTenantDestinationsRequest$outboundSchema;
  /** @deprecated use `ListTenantDestinationsRequest$Outbound` instead. */
  export type Outbound = ListTenantDestinationsRequest$Outbound;
}

export function listTenantDestinationsRequestToJSON(
  listTenantDestinationsRequest: ListTenantDestinationsRequest,
): string {
  return JSON.stringify(
    ListTenantDestinationsRequest$outboundSchema.parse(
      listTenantDestinationsRequest,
    ),
  );
}

export function listTenantDestinationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantDestinationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantDestinationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantDestinationsRequest' from JSON`,
  );
}
