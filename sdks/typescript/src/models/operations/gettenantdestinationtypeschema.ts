/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTenantDestinationTypeSchemaGlobals = {
  tenantId?: string | undefined;
};

export type GetTenantDestinationTypeSchemaSecurity = {
  adminApiKey?: string | undefined;
  tenantJwt?: string | undefined;
};

/**
 * The type of the destination.
 */
export const GetTenantDestinationTypeSchemaType = {
  Webhook: "webhook",
  AwsSqs: "aws_sqs",
  Rabbitmq: "rabbitmq",
  Hookdeck: "hookdeck",
  AwsKinesis: "aws_kinesis",
} as const;
/**
 * The type of the destination.
 */
export type GetTenantDestinationTypeSchemaType = ClosedEnum<
  typeof GetTenantDestinationTypeSchemaType
>;

export type GetTenantDestinationTypeSchemaRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The type of the destination.
   */
  type: GetTenantDestinationTypeSchemaType;
};

/** @internal */
export const GetTenantDestinationTypeSchemaGlobals$inboundSchema: z.ZodType<
  GetTenantDestinationTypeSchemaGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantDestinationTypeSchemaGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantDestinationTypeSchemaGlobals$outboundSchema: z.ZodType<
  GetTenantDestinationTypeSchemaGlobals$Outbound,
  z.ZodTypeDef,
  GetTenantDestinationTypeSchemaGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantDestinationTypeSchemaGlobals$ {
  /** @deprecated use `GetTenantDestinationTypeSchemaGlobals$inboundSchema` instead. */
  export const inboundSchema =
    GetTenantDestinationTypeSchemaGlobals$inboundSchema;
  /** @deprecated use `GetTenantDestinationTypeSchemaGlobals$outboundSchema` instead. */
  export const outboundSchema =
    GetTenantDestinationTypeSchemaGlobals$outboundSchema;
  /** @deprecated use `GetTenantDestinationTypeSchemaGlobals$Outbound` instead. */
  export type Outbound = GetTenantDestinationTypeSchemaGlobals$Outbound;
}

export function getTenantDestinationTypeSchemaGlobalsToJSON(
  getTenantDestinationTypeSchemaGlobals: GetTenantDestinationTypeSchemaGlobals,
): string {
  return JSON.stringify(
    GetTenantDestinationTypeSchemaGlobals$outboundSchema.parse(
      getTenantDestinationTypeSchemaGlobals,
    ),
  );
}

export function getTenantDestinationTypeSchemaGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantDestinationTypeSchemaGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTenantDestinationTypeSchemaGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantDestinationTypeSchemaGlobals' from JSON`,
  );
}

/** @internal */
export const GetTenantDestinationTypeSchemaSecurity$inboundSchema: z.ZodType<
  GetTenantDestinationTypeSchemaSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdminApiKey: z.string().optional(),
  TenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "AdminApiKey": "adminApiKey",
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type GetTenantDestinationTypeSchemaSecurity$Outbound = {
  AdminApiKey?: string | undefined;
  TenantJwt?: string | undefined;
};

/** @internal */
export const GetTenantDestinationTypeSchemaSecurity$outboundSchema: z.ZodType<
  GetTenantDestinationTypeSchemaSecurity$Outbound,
  z.ZodTypeDef,
  GetTenantDestinationTypeSchemaSecurity
> = z.object({
  adminApiKey: z.string().optional(),
  tenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminApiKey: "AdminApiKey",
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantDestinationTypeSchemaSecurity$ {
  /** @deprecated use `GetTenantDestinationTypeSchemaSecurity$inboundSchema` instead. */
  export const inboundSchema =
    GetTenantDestinationTypeSchemaSecurity$inboundSchema;
  /** @deprecated use `GetTenantDestinationTypeSchemaSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetTenantDestinationTypeSchemaSecurity$outboundSchema;
  /** @deprecated use `GetTenantDestinationTypeSchemaSecurity$Outbound` instead. */
  export type Outbound = GetTenantDestinationTypeSchemaSecurity$Outbound;
}

export function getTenantDestinationTypeSchemaSecurityToJSON(
  getTenantDestinationTypeSchemaSecurity:
    GetTenantDestinationTypeSchemaSecurity,
): string {
  return JSON.stringify(
    GetTenantDestinationTypeSchemaSecurity$outboundSchema.parse(
      getTenantDestinationTypeSchemaSecurity,
    ),
  );
}

export function getTenantDestinationTypeSchemaSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantDestinationTypeSchemaSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTenantDestinationTypeSchemaSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantDestinationTypeSchemaSecurity' from JSON`,
  );
}

/** @internal */
export const GetTenantDestinationTypeSchemaType$inboundSchema: z.ZodNativeEnum<
  typeof GetTenantDestinationTypeSchemaType
> = z.nativeEnum(GetTenantDestinationTypeSchemaType);

/** @internal */
export const GetTenantDestinationTypeSchemaType$outboundSchema: z.ZodNativeEnum<
  typeof GetTenantDestinationTypeSchemaType
> = GetTenantDestinationTypeSchemaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantDestinationTypeSchemaType$ {
  /** @deprecated use `GetTenantDestinationTypeSchemaType$inboundSchema` instead. */
  export const inboundSchema = GetTenantDestinationTypeSchemaType$inboundSchema;
  /** @deprecated use `GetTenantDestinationTypeSchemaType$outboundSchema` instead. */
  export const outboundSchema =
    GetTenantDestinationTypeSchemaType$outboundSchema;
}

/** @internal */
export const GetTenantDestinationTypeSchemaRequest$inboundSchema: z.ZodType<
  GetTenantDestinationTypeSchemaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  type: GetTenantDestinationTypeSchemaType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantDestinationTypeSchemaRequest$Outbound = {
  tenant_id?: string | undefined;
  type: string;
};

/** @internal */
export const GetTenantDestinationTypeSchemaRequest$outboundSchema: z.ZodType<
  GetTenantDestinationTypeSchemaRequest$Outbound,
  z.ZodTypeDef,
  GetTenantDestinationTypeSchemaRequest
> = z.object({
  tenantId: z.string().optional(),
  type: GetTenantDestinationTypeSchemaType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantDestinationTypeSchemaRequest$ {
  /** @deprecated use `GetTenantDestinationTypeSchemaRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetTenantDestinationTypeSchemaRequest$inboundSchema;
  /** @deprecated use `GetTenantDestinationTypeSchemaRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTenantDestinationTypeSchemaRequest$outboundSchema;
  /** @deprecated use `GetTenantDestinationTypeSchemaRequest$Outbound` instead. */
  export type Outbound = GetTenantDestinationTypeSchemaRequest$Outbound;
}

export function getTenantDestinationTypeSchemaRequestToJSON(
  getTenantDestinationTypeSchemaRequest: GetTenantDestinationTypeSchemaRequest,
): string {
  return JSON.stringify(
    GetTenantDestinationTypeSchemaRequest$outboundSchema.parse(
      getTenantDestinationTypeSchemaRequest,
    ),
  );
}

export function getTenantDestinationTypeSchemaRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantDestinationTypeSchemaRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTenantDestinationTypeSchemaRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantDestinationTypeSchemaRequest' from JSON`,
  );
}
