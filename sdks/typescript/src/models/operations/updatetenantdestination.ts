/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTenantDestinationGlobals = {
  tenantId?: string | undefined;
};

export type UpdateTenantDestinationSecurity = {
  adminApiKey?: string | undefined;
  tenantJwt?: string | undefined;
};

export type UpdateTenantDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
  destinationUpdate: components.DestinationUpdate;
};

/**
 * Destination updated successfully or OAuth redirect needed.
 */
export type UpdateTenantDestinationResponse = components.Destination;

/** @internal */
export const UpdateTenantDestinationGlobals$inboundSchema: z.ZodType<
  UpdateTenantDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type UpdateTenantDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const UpdateTenantDestinationGlobals$outboundSchema: z.ZodType<
  UpdateTenantDestinationGlobals$Outbound,
  z.ZodTypeDef,
  UpdateTenantDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTenantDestinationGlobals$ {
  /** @deprecated use `UpdateTenantDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateTenantDestinationGlobals$inboundSchema;
  /** @deprecated use `UpdateTenantDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateTenantDestinationGlobals$outboundSchema;
  /** @deprecated use `UpdateTenantDestinationGlobals$Outbound` instead. */
  export type Outbound = UpdateTenantDestinationGlobals$Outbound;
}

export function updateTenantDestinationGlobalsToJSON(
  updateTenantDestinationGlobals: UpdateTenantDestinationGlobals,
): string {
  return JSON.stringify(
    UpdateTenantDestinationGlobals$outboundSchema.parse(
      updateTenantDestinationGlobals,
    ),
  );
}

export function updateTenantDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTenantDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTenantDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTenantDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateTenantDestinationSecurity$inboundSchema: z.ZodType<
  UpdateTenantDestinationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdminApiKey: z.string().optional(),
  TenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "AdminApiKey": "adminApiKey",
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type UpdateTenantDestinationSecurity$Outbound = {
  AdminApiKey?: string | undefined;
  TenantJwt?: string | undefined;
};

/** @internal */
export const UpdateTenantDestinationSecurity$outboundSchema: z.ZodType<
  UpdateTenantDestinationSecurity$Outbound,
  z.ZodTypeDef,
  UpdateTenantDestinationSecurity
> = z.object({
  adminApiKey: z.string().optional(),
  tenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminApiKey: "AdminApiKey",
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTenantDestinationSecurity$ {
  /** @deprecated use `UpdateTenantDestinationSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateTenantDestinationSecurity$inboundSchema;
  /** @deprecated use `UpdateTenantDestinationSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateTenantDestinationSecurity$outboundSchema;
  /** @deprecated use `UpdateTenantDestinationSecurity$Outbound` instead. */
  export type Outbound = UpdateTenantDestinationSecurity$Outbound;
}

export function updateTenantDestinationSecurityToJSON(
  updateTenantDestinationSecurity: UpdateTenantDestinationSecurity,
): string {
  return JSON.stringify(
    UpdateTenantDestinationSecurity$outboundSchema.parse(
      updateTenantDestinationSecurity,
    ),
  );
}

export function updateTenantDestinationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTenantDestinationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTenantDestinationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTenantDestinationSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateTenantDestinationRequest$inboundSchema: z.ZodType<
  UpdateTenantDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
  DestinationUpdate: components.DestinationUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
    "DestinationUpdate": "destinationUpdate",
  });
});

/** @internal */
export type UpdateTenantDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
  DestinationUpdate: components.DestinationUpdate$Outbound;
};

/** @internal */
export const UpdateTenantDestinationRequest$outboundSchema: z.ZodType<
  UpdateTenantDestinationRequest$Outbound,
  z.ZodTypeDef,
  UpdateTenantDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
  destinationUpdate: components.DestinationUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
    destinationUpdate: "DestinationUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTenantDestinationRequest$ {
  /** @deprecated use `UpdateTenantDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTenantDestinationRequest$inboundSchema;
  /** @deprecated use `UpdateTenantDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTenantDestinationRequest$outboundSchema;
  /** @deprecated use `UpdateTenantDestinationRequest$Outbound` instead. */
  export type Outbound = UpdateTenantDestinationRequest$Outbound;
}

export function updateTenantDestinationRequestToJSON(
  updateTenantDestinationRequest: UpdateTenantDestinationRequest,
): string {
  return JSON.stringify(
    UpdateTenantDestinationRequest$outboundSchema.parse(
      updateTenantDestinationRequest,
    ),
  );
}

export function updateTenantDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTenantDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTenantDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTenantDestinationRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTenantDestinationResponse$inboundSchema: z.ZodType<
  UpdateTenantDestinationResponse,
  z.ZodTypeDef,
  unknown
> = components.Destination$inboundSchema;

/** @internal */
export type UpdateTenantDestinationResponse$Outbound =
  components.Destination$Outbound;

/** @internal */
export const UpdateTenantDestinationResponse$outboundSchema: z.ZodType<
  UpdateTenantDestinationResponse$Outbound,
  z.ZodTypeDef,
  UpdateTenantDestinationResponse
> = components.Destination$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTenantDestinationResponse$ {
  /** @deprecated use `UpdateTenantDestinationResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTenantDestinationResponse$inboundSchema;
  /** @deprecated use `UpdateTenantDestinationResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTenantDestinationResponse$outboundSchema;
  /** @deprecated use `UpdateTenantDestinationResponse$Outbound` instead. */
  export type Outbound = UpdateTenantDestinationResponse$Outbound;
}

export function updateTenantDestinationResponseToJSON(
  updateTenantDestinationResponse: UpdateTenantDestinationResponse,
): string {
  return JSON.stringify(
    UpdateTenantDestinationResponse$outboundSchema.parse(
      updateTenantDestinationResponse,
    ),
  );
}

export function updateTenantDestinationResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTenantDestinationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTenantDestinationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTenantDestinationResponse' from JSON`,
  );
}
