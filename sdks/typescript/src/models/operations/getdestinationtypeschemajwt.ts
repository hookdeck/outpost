/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDestinationTypeSchemaJwtSecurity = {
  tenantJwt: string;
};

/**
 * The type of the destination.
 */
export const GetDestinationTypeSchemaJwtType = {
  Webhook: "webhook",
  AwsSqs: "aws_sqs",
  Rabbitmq: "rabbitmq",
  Hookdeck: "hookdeck",
  AwsKinesis: "aws_kinesis",
} as const;
/**
 * The type of the destination.
 */
export type GetDestinationTypeSchemaJwtType = ClosedEnum<
  typeof GetDestinationTypeSchemaJwtType
>;

export type GetDestinationTypeSchemaJwtRequest = {
  /**
   * The type of the destination.
   */
  type: GetDestinationTypeSchemaJwtType;
};

/** @internal */
export const GetDestinationTypeSchemaJwtSecurity$inboundSchema: z.ZodType<
  GetDestinationTypeSchemaJwtSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  TenantJwt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type GetDestinationTypeSchemaJwtSecurity$Outbound = {
  TenantJwt: string;
};

/** @internal */
export const GetDestinationTypeSchemaJwtSecurity$outboundSchema: z.ZodType<
  GetDestinationTypeSchemaJwtSecurity$Outbound,
  z.ZodTypeDef,
  GetDestinationTypeSchemaJwtSecurity
> = z.object({
  tenantJwt: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDestinationTypeSchemaJwtSecurity$ {
  /** @deprecated use `GetDestinationTypeSchemaJwtSecurity$inboundSchema` instead. */
  export const inboundSchema =
    GetDestinationTypeSchemaJwtSecurity$inboundSchema;
  /** @deprecated use `GetDestinationTypeSchemaJwtSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetDestinationTypeSchemaJwtSecurity$outboundSchema;
  /** @deprecated use `GetDestinationTypeSchemaJwtSecurity$Outbound` instead. */
  export type Outbound = GetDestinationTypeSchemaJwtSecurity$Outbound;
}

export function getDestinationTypeSchemaJwtSecurityToJSON(
  getDestinationTypeSchemaJwtSecurity: GetDestinationTypeSchemaJwtSecurity,
): string {
  return JSON.stringify(
    GetDestinationTypeSchemaJwtSecurity$outboundSchema.parse(
      getDestinationTypeSchemaJwtSecurity,
    ),
  );
}

export function getDestinationTypeSchemaJwtSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetDestinationTypeSchemaJwtSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDestinationTypeSchemaJwtSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDestinationTypeSchemaJwtSecurity' from JSON`,
  );
}

/** @internal */
export const GetDestinationTypeSchemaJwtType$inboundSchema: z.ZodNativeEnum<
  typeof GetDestinationTypeSchemaJwtType
> = z.nativeEnum(GetDestinationTypeSchemaJwtType);

/** @internal */
export const GetDestinationTypeSchemaJwtType$outboundSchema: z.ZodNativeEnum<
  typeof GetDestinationTypeSchemaJwtType
> = GetDestinationTypeSchemaJwtType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDestinationTypeSchemaJwtType$ {
  /** @deprecated use `GetDestinationTypeSchemaJwtType$inboundSchema` instead. */
  export const inboundSchema = GetDestinationTypeSchemaJwtType$inboundSchema;
  /** @deprecated use `GetDestinationTypeSchemaJwtType$outboundSchema` instead. */
  export const outboundSchema = GetDestinationTypeSchemaJwtType$outboundSchema;
}

/** @internal */
export const GetDestinationTypeSchemaJwtRequest$inboundSchema: z.ZodType<
  GetDestinationTypeSchemaJwtRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDestinationTypeSchemaJwtType$inboundSchema,
});

/** @internal */
export type GetDestinationTypeSchemaJwtRequest$Outbound = {
  type: string;
};

/** @internal */
export const GetDestinationTypeSchemaJwtRequest$outboundSchema: z.ZodType<
  GetDestinationTypeSchemaJwtRequest$Outbound,
  z.ZodTypeDef,
  GetDestinationTypeSchemaJwtRequest
> = z.object({
  type: GetDestinationTypeSchemaJwtType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDestinationTypeSchemaJwtRequest$ {
  /** @deprecated use `GetDestinationTypeSchemaJwtRequest$inboundSchema` instead. */
  export const inboundSchema = GetDestinationTypeSchemaJwtRequest$inboundSchema;
  /** @deprecated use `GetDestinationTypeSchemaJwtRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetDestinationTypeSchemaJwtRequest$outboundSchema;
  /** @deprecated use `GetDestinationTypeSchemaJwtRequest$Outbound` instead. */
  export type Outbound = GetDestinationTypeSchemaJwtRequest$Outbound;
}

export function getDestinationTypeSchemaJwtRequestToJSON(
  getDestinationTypeSchemaJwtRequest: GetDestinationTypeSchemaJwtRequest,
): string {
  return JSON.stringify(
    GetDestinationTypeSchemaJwtRequest$outboundSchema.parse(
      getDestinationTypeSchemaJwtRequest,
    ),
  );
}

export function getDestinationTypeSchemaJwtRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDestinationTypeSchemaJwtRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDestinationTypeSchemaJwtRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDestinationTypeSchemaJwtRequest' from JSON`,
  );
}
