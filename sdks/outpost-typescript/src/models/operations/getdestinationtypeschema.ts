/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the destination.
 */
export const GetDestinationTypeSchemaType = {
  Webhook: "webhook",
  AwsSqs: "aws_sqs",
  Rabbitmq: "rabbitmq",
  Hookdeck: "hookdeck",
  AwsKinesis: "aws_kinesis",
  AwsS3: "aws_s3",
} as const;
/**
 * The type of the destination.
 */
export type GetDestinationTypeSchemaType = ClosedEnum<
  typeof GetDestinationTypeSchemaType
>;

export type GetDestinationTypeSchemaRequest = {
  /**
   * The type of the destination.
   */
  type: GetDestinationTypeSchemaType;
};

/** @internal */
export const GetDestinationTypeSchemaType$inboundSchema: z.ZodNativeEnum<
  typeof GetDestinationTypeSchemaType
> = z.nativeEnum(GetDestinationTypeSchemaType);

/** @internal */
export const GetDestinationTypeSchemaType$outboundSchema: z.ZodNativeEnum<
  typeof GetDestinationTypeSchemaType
> = GetDestinationTypeSchemaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDestinationTypeSchemaType$ {
  /** @deprecated use `GetDestinationTypeSchemaType$inboundSchema` instead. */
  export const inboundSchema = GetDestinationTypeSchemaType$inboundSchema;
  /** @deprecated use `GetDestinationTypeSchemaType$outboundSchema` instead. */
  export const outboundSchema = GetDestinationTypeSchemaType$outboundSchema;
}

/** @internal */
export const GetDestinationTypeSchemaRequest$inboundSchema: z.ZodType<
  GetDestinationTypeSchemaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDestinationTypeSchemaType$inboundSchema,
});

/** @internal */
export type GetDestinationTypeSchemaRequest$Outbound = {
  type: string;
};

/** @internal */
export const GetDestinationTypeSchemaRequest$outboundSchema: z.ZodType<
  GetDestinationTypeSchemaRequest$Outbound,
  z.ZodTypeDef,
  GetDestinationTypeSchemaRequest
> = z.object({
  type: GetDestinationTypeSchemaType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDestinationTypeSchemaRequest$ {
  /** @deprecated use `GetDestinationTypeSchemaRequest$inboundSchema` instead. */
  export const inboundSchema = GetDestinationTypeSchemaRequest$inboundSchema;
  /** @deprecated use `GetDestinationTypeSchemaRequest$outboundSchema` instead. */
  export const outboundSchema = GetDestinationTypeSchemaRequest$outboundSchema;
  /** @deprecated use `GetDestinationTypeSchemaRequest$Outbound` instead. */
  export type Outbound = GetDestinationTypeSchemaRequest$Outbound;
}

export function getDestinationTypeSchemaRequestToJSON(
  getDestinationTypeSchemaRequest: GetDestinationTypeSchemaRequest,
): string {
  return JSON.stringify(
    GetDestinationTypeSchemaRequest$outboundSchema.parse(
      getDestinationTypeSchemaRequest,
    ),
  );
}

export function getDestinationTypeSchemaRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDestinationTypeSchemaRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDestinationTypeSchemaRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDestinationTypeSchemaRequest' from JSON`,
  );
}
