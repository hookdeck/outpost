/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTenantEventsByDestinationGlobals = {
  tenantId?: string | undefined;
};

/**
 * Filter events by delivery status.
 */
export const ListTenantEventsByDestinationStatus = {
  Success: "success",
  Failed: "failed",
} as const;
/**
 * Filter events by delivery status.
 */
export type ListTenantEventsByDestinationStatus = ClosedEnum<
  typeof ListTenantEventsByDestinationStatus
>;

export type ListTenantEventsByDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
  /**
   * Filter events by delivery status.
   */
  status?: ListTenantEventsByDestinationStatus | undefined;
  /**
   * Cursor for next page of results
   */
  next?: string | undefined;
  /**
   * Cursor for previous page of results
   */
  prev?: string | undefined;
  /**
   * Number of items per page (default 100, max 1000)
   */
  limit?: number | undefined;
  /**
   * Start time filter (RFC3339 format)
   */
  start?: Date | undefined;
  /**
   * End time filter (RFC3339 format)
   */
  end?: Date | undefined;
};

/**
 * A paginated list of events for the destination.
 */
export type ListTenantEventsByDestinationResponseBody = {
  /**
   * Total number of items across all pages
   */
  count: number;
  data: Array<components.Event>;
  /**
   * Cursor for next page (empty string if no next page)
   */
  nextCursor: string;
  /**
   * Cursor for previous page (empty string if no previous page)
   */
  prevCursor: string;
};

export type ListTenantEventsByDestinationResponse = {
  result: ListTenantEventsByDestinationResponseBody;
};

/** @internal */
export const ListTenantEventsByDestinationGlobals$inboundSchema: z.ZodType<
  ListTenantEventsByDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListTenantEventsByDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const ListTenantEventsByDestinationGlobals$outboundSchema: z.ZodType<
  ListTenantEventsByDestinationGlobals$Outbound,
  z.ZodTypeDef,
  ListTenantEventsByDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsByDestinationGlobals$ {
  /** @deprecated use `ListTenantEventsByDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema =
    ListTenantEventsByDestinationGlobals$inboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventsByDestinationGlobals$outboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationGlobals$Outbound` instead. */
  export type Outbound = ListTenantEventsByDestinationGlobals$Outbound;
}

export function listTenantEventsByDestinationGlobalsToJSON(
  listTenantEventsByDestinationGlobals: ListTenantEventsByDestinationGlobals,
): string {
  return JSON.stringify(
    ListTenantEventsByDestinationGlobals$outboundSchema.parse(
      listTenantEventsByDestinationGlobals,
    ),
  );
}

export function listTenantEventsByDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventsByDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListTenantEventsByDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventsByDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const ListTenantEventsByDestinationStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListTenantEventsByDestinationStatus
> = z.nativeEnum(ListTenantEventsByDestinationStatus);

/** @internal */
export const ListTenantEventsByDestinationStatus$outboundSchema:
  z.ZodNativeEnum<typeof ListTenantEventsByDestinationStatus> =
    ListTenantEventsByDestinationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsByDestinationStatus$ {
  /** @deprecated use `ListTenantEventsByDestinationStatus$inboundSchema` instead. */
  export const inboundSchema =
    ListTenantEventsByDestinationStatus$inboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationStatus$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventsByDestinationStatus$outboundSchema;
}

/** @internal */
export const ListTenantEventsByDestinationRequest$inboundSchema: z.ZodType<
  ListTenantEventsByDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
  status: ListTenantEventsByDestinationStatus$inboundSchema.optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
  limit: z.number().int().default(100),
  start: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  end: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
  });
});

/** @internal */
export type ListTenantEventsByDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
  status?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
  limit: number;
  start?: string | undefined;
  end?: string | undefined;
};

/** @internal */
export const ListTenantEventsByDestinationRequest$outboundSchema: z.ZodType<
  ListTenantEventsByDestinationRequest$Outbound,
  z.ZodTypeDef,
  ListTenantEventsByDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
  status: ListTenantEventsByDestinationStatus$outboundSchema.optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
  limit: z.number().int().default(100),
  start: z.date().transform(v => v.toISOString()).optional(),
  end: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsByDestinationRequest$ {
  /** @deprecated use `ListTenantEventsByDestinationRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListTenantEventsByDestinationRequest$inboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventsByDestinationRequest$outboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationRequest$Outbound` instead. */
  export type Outbound = ListTenantEventsByDestinationRequest$Outbound;
}

export function listTenantEventsByDestinationRequestToJSON(
  listTenantEventsByDestinationRequest: ListTenantEventsByDestinationRequest,
): string {
  return JSON.stringify(
    ListTenantEventsByDestinationRequest$outboundSchema.parse(
      listTenantEventsByDestinationRequest,
    ),
  );
}

export function listTenantEventsByDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventsByDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListTenantEventsByDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventsByDestinationRequest' from JSON`,
  );
}

/** @internal */
export const ListTenantEventsByDestinationResponseBody$inboundSchema: z.ZodType<
  ListTenantEventsByDestinationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  data: z.array(components.Event$inboundSchema),
  next: z.string(),
  prev: z.string(),
}).transform((v) => {
  return remap$(v, {
    "next": "nextCursor",
    "prev": "prevCursor",
  });
});

/** @internal */
export type ListTenantEventsByDestinationResponseBody$Outbound = {
  count: number;
  data: Array<components.Event$Outbound>;
  next: string;
  prev: string;
};

/** @internal */
export const ListTenantEventsByDestinationResponseBody$outboundSchema:
  z.ZodType<
    ListTenantEventsByDestinationResponseBody$Outbound,
    z.ZodTypeDef,
    ListTenantEventsByDestinationResponseBody
  > = z.object({
    count: z.number().int(),
    data: z.array(components.Event$outboundSchema),
    nextCursor: z.string(),
    prevCursor: z.string(),
  }).transform((v) => {
    return remap$(v, {
      nextCursor: "next",
      prevCursor: "prev",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsByDestinationResponseBody$ {
  /** @deprecated use `ListTenantEventsByDestinationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListTenantEventsByDestinationResponseBody$inboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventsByDestinationResponseBody$outboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationResponseBody$Outbound` instead. */
  export type Outbound = ListTenantEventsByDestinationResponseBody$Outbound;
}

export function listTenantEventsByDestinationResponseBodyToJSON(
  listTenantEventsByDestinationResponseBody:
    ListTenantEventsByDestinationResponseBody,
): string {
  return JSON.stringify(
    ListTenantEventsByDestinationResponseBody$outboundSchema.parse(
      listTenantEventsByDestinationResponseBody,
    ),
  );
}

export function listTenantEventsByDestinationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ListTenantEventsByDestinationResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListTenantEventsByDestinationResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListTenantEventsByDestinationResponseBody' from JSON`,
  );
}

/** @internal */
export const ListTenantEventsByDestinationResponse$inboundSchema: z.ZodType<
  ListTenantEventsByDestinationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListTenantEventsByDestinationResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListTenantEventsByDestinationResponse$Outbound = {
  Result: ListTenantEventsByDestinationResponseBody$Outbound;
};

/** @internal */
export const ListTenantEventsByDestinationResponse$outboundSchema: z.ZodType<
  ListTenantEventsByDestinationResponse$Outbound,
  z.ZodTypeDef,
  ListTenantEventsByDestinationResponse
> = z.object({
  result: z.lazy(() =>
    ListTenantEventsByDestinationResponseBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsByDestinationResponse$ {
  /** @deprecated use `ListTenantEventsByDestinationResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListTenantEventsByDestinationResponse$inboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventsByDestinationResponse$outboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationResponse$Outbound` instead. */
  export type Outbound = ListTenantEventsByDestinationResponse$Outbound;
}

export function listTenantEventsByDestinationResponseToJSON(
  listTenantEventsByDestinationResponse: ListTenantEventsByDestinationResponse,
): string {
  return JSON.stringify(
    ListTenantEventsByDestinationResponse$outboundSchema.parse(
      listTenantEventsByDestinationResponse,
    ),
  );
}

export function listTenantEventsByDestinationResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventsByDestinationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListTenantEventsByDestinationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventsByDestinationResponse' from JSON`,
  );
}
