/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeliveryAttemptStatus = {
  Success: "success",
  Failed: "failed",
} as const;
export type DeliveryAttemptStatus = ClosedEnum<typeof DeliveryAttemptStatus>;

export type DeliveryAttempt = {
  deliveredAt?: Date | undefined;
  status?: DeliveryAttemptStatus | undefined;
  responseStatusCode?: number | undefined;
  responseBody?: string | undefined;
  responseHeaders?: { [k: string]: string } | undefined;
};

/** @internal */
export const DeliveryAttemptStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeliveryAttemptStatus
> = z.nativeEnum(DeliveryAttemptStatus);

/** @internal */
export const DeliveryAttemptStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeliveryAttemptStatus
> = DeliveryAttemptStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryAttemptStatus$ {
  /** @deprecated use `DeliveryAttemptStatus$inboundSchema` instead. */
  export const inboundSchema = DeliveryAttemptStatus$inboundSchema;
  /** @deprecated use `DeliveryAttemptStatus$outboundSchema` instead. */
  export const outboundSchema = DeliveryAttemptStatus$outboundSchema;
}

/** @internal */
export const DeliveryAttempt$inboundSchema: z.ZodType<
  DeliveryAttempt,
  z.ZodTypeDef,
  unknown
> = z.object({
  delivered_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  status: DeliveryAttemptStatus$inboundSchema.optional(),
  response_status_code: z.number().int().optional(),
  response_body: z.string().optional(),
  response_headers: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "delivered_at": "deliveredAt",
    "response_status_code": "responseStatusCode",
    "response_body": "responseBody",
    "response_headers": "responseHeaders",
  });
});

/** @internal */
export type DeliveryAttempt$Outbound = {
  delivered_at?: string | undefined;
  status?: string | undefined;
  response_status_code?: number | undefined;
  response_body?: string | undefined;
  response_headers?: { [k: string]: string } | undefined;
};

/** @internal */
export const DeliveryAttempt$outboundSchema: z.ZodType<
  DeliveryAttempt$Outbound,
  z.ZodTypeDef,
  DeliveryAttempt
> = z.object({
  deliveredAt: z.date().transform(v => v.toISOString()).optional(),
  status: DeliveryAttemptStatus$outboundSchema.optional(),
  responseStatusCode: z.number().int().optional(),
  responseBody: z.string().optional(),
  responseHeaders: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    deliveredAt: "delivered_at",
    responseStatusCode: "response_status_code",
    responseBody: "response_body",
    responseHeaders: "response_headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryAttempt$ {
  /** @deprecated use `DeliveryAttempt$inboundSchema` instead. */
  export const inboundSchema = DeliveryAttempt$inboundSchema;
  /** @deprecated use `DeliveryAttempt$outboundSchema` instead. */
  export const outboundSchema = DeliveryAttempt$outboundSchema;
  /** @deprecated use `DeliveryAttempt$Outbound` instead. */
  export type Outbound = DeliveryAttempt$Outbound;
}

export function deliveryAttemptToJSON(
  deliveryAttempt: DeliveryAttempt,
): string {
  return JSON.stringify(DeliveryAttempt$outboundSchema.parse(deliveryAttempt));
}

export function deliveryAttemptFromJSON(
  jsonString: string,
): SafeParseResult<DeliveryAttempt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeliveryAttempt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeliveryAttempt' from JSON`,
  );
}
