/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PublishResponse = {
  /**
   * The ID of the event that was accepted for publishing. This will be the ID provided in the request's `id` field if present, otherwise it's a server-generated UUID.
   */
  id: string;
};

/** @internal */
export const PublishResponse$inboundSchema: z.ZodType<
  PublishResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PublishResponse$Outbound = {
  id: string;
};

/** @internal */
export const PublishResponse$outboundSchema: z.ZodType<
  PublishResponse$Outbound,
  z.ZodTypeDef,
  PublishResponse
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishResponse$ {
  /** @deprecated use `PublishResponse$inboundSchema` instead. */
  export const inboundSchema = PublishResponse$inboundSchema;
  /** @deprecated use `PublishResponse$outboundSchema` instead. */
  export const outboundSchema = PublishResponse$outboundSchema;
  /** @deprecated use `PublishResponse$Outbound` instead. */
  export type Outbound = PublishResponse$Outbound;
}

export function publishResponseToJSON(
  publishResponse: PublishResponse,
): string {
  return JSON.stringify(PublishResponse$outboundSchema.parse(publishResponse));
}

export function publishResponseFromJSON(
  jsonString: string,
): SafeParseResult<PublishResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishResponse' from JSON`,
  );
}
