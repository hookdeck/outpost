/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GCPPubSubConfig,
  GCPPubSubConfig$inboundSchema,
  GCPPubSubConfig$Outbound,
  GCPPubSubConfig$outboundSchema,
} from "./gcppubsubconfig.js";
import {
  GCPPubSubCredentials,
  GCPPubSubCredentials$inboundSchema,
  GCPPubSubCredentials$Outbound,
  GCPPubSubCredentials$outboundSchema,
} from "./gcppubsubcredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

/**
 * Type of the destination. Must be 'gcp_pubsub'.
 */
export const DestinationCreateGCPPubSubType = {
  GcpPubsub: "gcp_pubsub",
} as const;
/**
 * Type of the destination. Must be 'gcp_pubsub'.
 */
export type DestinationCreateGCPPubSubType = ClosedEnum<
  typeof DestinationCreateGCPPubSubType
>;

export type DestinationCreateGCPPubSub = {
  /**
   * Optional user-provided ID. A UUID will be generated if empty.
   */
  id?: string | undefined;
  /**
   * Type of the destination. Must be 'gcp_pubsub'.
   */
  type: DestinationCreateGCPPubSubType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  config: GCPPubSubConfig;
  credentials: GCPPubSubCredentials;
};

/** @internal */
export const DestinationCreateGCPPubSubType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateGCPPubSubType
> = z.nativeEnum(DestinationCreateGCPPubSubType);

/** @internal */
export const DestinationCreateGCPPubSubType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateGCPPubSubType
> = DestinationCreateGCPPubSubType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateGCPPubSubType$ {
  /** @deprecated use `DestinationCreateGCPPubSubType$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateGCPPubSubType$inboundSchema;
  /** @deprecated use `DestinationCreateGCPPubSubType$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateGCPPubSubType$outboundSchema;
}

/** @internal */
export const DestinationCreateGCPPubSub$inboundSchema: z.ZodType<
  DestinationCreateGCPPubSub,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateGCPPubSubType$inboundSchema,
  topics: Topics$inboundSchema,
  config: GCPPubSubConfig$inboundSchema,
  credentials: GCPPubSubCredentials$inboundSchema,
});

/** @internal */
export type DestinationCreateGCPPubSub$Outbound = {
  id?: string | undefined;
  type: string;
  topics: Topics$Outbound;
  config: GCPPubSubConfig$Outbound;
  credentials: GCPPubSubCredentials$Outbound;
};

/** @internal */
export const DestinationCreateGCPPubSub$outboundSchema: z.ZodType<
  DestinationCreateGCPPubSub$Outbound,
  z.ZodTypeDef,
  DestinationCreateGCPPubSub
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateGCPPubSubType$outboundSchema,
  topics: Topics$outboundSchema,
  config: GCPPubSubConfig$outboundSchema,
  credentials: GCPPubSubCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateGCPPubSub$ {
  /** @deprecated use `DestinationCreateGCPPubSub$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateGCPPubSub$inboundSchema;
  /** @deprecated use `DestinationCreateGCPPubSub$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateGCPPubSub$outboundSchema;
  /** @deprecated use `DestinationCreateGCPPubSub$Outbound` instead. */
  export type Outbound = DestinationCreateGCPPubSub$Outbound;
}

export function destinationCreateGCPPubSubToJSON(
  destinationCreateGCPPubSub: DestinationCreateGCPPubSub,
): string {
  return JSON.stringify(
    DestinationCreateGCPPubSub$outboundSchema.parse(destinationCreateGCPPubSub),
  );
}

export function destinationCreateGCPPubSubFromJSON(
  jsonString: string,
): SafeParseResult<DestinationCreateGCPPubSub, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationCreateGCPPubSub$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationCreateGCPPubSub' from JSON`,
  );
}
