/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const EventStatus = {
  Success: "success",
  Failed: "failed",
} as const;
export type EventStatus = ClosedEnum<typeof EventStatus>;

export type Event = {
  id?: string | undefined;
  destinationId?: string | undefined;
  topic?: string | undefined;
  /**
   * Time the event was received/processed.
   */
  time?: Date | undefined;
  /**
   * Time the event was successfully delivered.
   */
  successfulAt?: Date | null | undefined;
  /**
   * Key-value string pairs of metadata associated with the event.
   */
  metadata?: { [k: string]: string } | null | undefined;
  status?: EventStatus | undefined;
  /**
   * Freeform JSON data of the event.
   */
  data?: { [k: string]: any } | undefined;
};

/** @internal */
export const EventStatus$inboundSchema: z.ZodNativeEnum<typeof EventStatus> = z
  .nativeEnum(EventStatus);

/** @internal */
export const EventStatus$outboundSchema: z.ZodNativeEnum<typeof EventStatus> =
  EventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventStatus$ {
  /** @deprecated use `EventStatus$inboundSchema` instead. */
  export const inboundSchema = EventStatus$inboundSchema;
  /** @deprecated use `EventStatus$outboundSchema` instead. */
  export const outboundSchema = EventStatus$outboundSchema;
}

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    destination_id: z.string().optional(),
    topic: z.string().optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    successful_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    metadata: z.nullable(z.record(z.string())).optional(),
    status: EventStatus$inboundSchema.optional(),
    data: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "destination_id": "destinationId",
      "successful_at": "successfulAt",
    });
  });

/** @internal */
export type Event$Outbound = {
  id?: string | undefined;
  destination_id?: string | undefined;
  topic?: string | undefined;
  time?: string | undefined;
  successful_at?: string | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  status?: string | undefined;
  data?: { [k: string]: any } | undefined;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<
  Event$Outbound,
  z.ZodTypeDef,
  Event
> = z.object({
  id: z.string().optional(),
  destinationId: z.string().optional(),
  topic: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  successfulAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  status: EventStatus$outboundSchema.optional(),
  data: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    destinationId: "destination_id",
    successfulAt: "successful_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
  /** @deprecated use `Event$Outbound` instead. */
  export type Outbound = Event$Outbound;
}

export function eventToJSON(event: Event): string {
  return JSON.stringify(Event$outboundSchema.parse(event));
}

export function eventFromJSON(
  jsonString: string,
): SafeParseResult<Event, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event' from JSON`,
  );
}
