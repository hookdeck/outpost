/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Awss3Config,
  Awss3Config$inboundSchema,
  Awss3Config$Outbound,
  Awss3Config$outboundSchema,
} from "./awss3config.js";
import {
  Awss3Credentials,
  Awss3Credentials$inboundSchema,
  Awss3Credentials$Outbound,
  Awss3Credentials$outboundSchema,
} from "./awss3credentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

/**
 * Type of the destination. Must be 'aws_s3'.
 */
export const DestinationCreateAwss3Type = {
  AwsS3: "aws_s3",
} as const;
/**
 * Type of the destination. Must be 'aws_s3'.
 */
export type DestinationCreateAwss3Type = ClosedEnum<
  typeof DestinationCreateAwss3Type
>;

export type DestinationCreateAwss3 = {
  /**
   * Optional user-provided ID. A UUID will be generated if empty.
   */
  id?: string | undefined;
  /**
   * Type of the destination. Must be 'aws_s3'.
   */
  type: DestinationCreateAwss3Type;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  config: Awss3Config;
  credentials: Awss3Credentials;
};

/** @internal */
export const DestinationCreateAwss3Type$inboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateAwss3Type
> = z.nativeEnum(DestinationCreateAwss3Type);

/** @internal */
export const DestinationCreateAwss3Type$outboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateAwss3Type
> = DestinationCreateAwss3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateAwss3Type$ {
  /** @deprecated use `DestinationCreateAwss3Type$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateAwss3Type$inboundSchema;
  /** @deprecated use `DestinationCreateAwss3Type$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateAwss3Type$outboundSchema;
}

/** @internal */
export const DestinationCreateAwss3$inboundSchema: z.ZodType<
  DestinationCreateAwss3,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateAwss3Type$inboundSchema,
  topics: Topics$inboundSchema,
  config: Awss3Config$inboundSchema,
  credentials: Awss3Credentials$inboundSchema,
});

/** @internal */
export type DestinationCreateAwss3$Outbound = {
  id?: string | undefined;
  type: string;
  topics: Topics$Outbound;
  config: Awss3Config$Outbound;
  credentials: Awss3Credentials$Outbound;
};

/** @internal */
export const DestinationCreateAwss3$outboundSchema: z.ZodType<
  DestinationCreateAwss3$Outbound,
  z.ZodTypeDef,
  DestinationCreateAwss3
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateAwss3Type$outboundSchema,
  topics: Topics$outboundSchema,
  config: Awss3Config$outboundSchema,
  credentials: Awss3Credentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateAwss3$ {
  /** @deprecated use `DestinationCreateAwss3$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateAwss3$inboundSchema;
  /** @deprecated use `DestinationCreateAwss3$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateAwss3$outboundSchema;
  /** @deprecated use `DestinationCreateAwss3$Outbound` instead. */
  export type Outbound = DestinationCreateAwss3$Outbound;
}

export function destinationCreateAwss3ToJSON(
  destinationCreateAwss3: DestinationCreateAwss3,
): string {
  return JSON.stringify(
    DestinationCreateAwss3$outboundSchema.parse(destinationCreateAwss3),
  );
}

export function destinationCreateAwss3FromJSON(
  jsonString: string,
): SafeParseResult<DestinationCreateAwss3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationCreateAwss3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationCreateAwss3' from JSON`,
  );
}
