/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Awss3Config = {
  /**
   * The name of your AWS S3 bucket.
   */
  bucket: string;
  /**
   * The AWS region where your bucket is located.
   */
  region: string;
  /**
   * JMESPath expression for generating S3 object keys. Default is join('', [time.rfc3339_nano, '_', metadata."event-id", '.json']).
   */
  keyTemplate?: string | undefined;
  /**
   * The storage class for the S3 objects (e.g., STANDARD, INTELLIGENT_TIERING, GLACIER, etc.). Defaults to "STANDARD".
   */
  storageClass?: string | undefined;
};

/** @internal */
export const Awss3Config$inboundSchema: z.ZodType<
  Awss3Config,
  z.ZodTypeDef,
  unknown
> = z.object({
  bucket: z.string(),
  region: z.string(),
  key_template: z.string().optional(),
  storage_class: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "key_template": "keyTemplate",
    "storage_class": "storageClass",
  });
});

/** @internal */
export type Awss3Config$Outbound = {
  bucket: string;
  region: string;
  key_template?: string | undefined;
  storage_class?: string | undefined;
};

/** @internal */
export const Awss3Config$outboundSchema: z.ZodType<
  Awss3Config$Outbound,
  z.ZodTypeDef,
  Awss3Config
> = z.object({
  bucket: z.string(),
  region: z.string(),
  keyTemplate: z.string().optional(),
  storageClass: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    keyTemplate: "key_template",
    storageClass: "storage_class",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Awss3Config$ {
  /** @deprecated use `Awss3Config$inboundSchema` instead. */
  export const inboundSchema = Awss3Config$inboundSchema;
  /** @deprecated use `Awss3Config$outboundSchema` instead. */
  export const outboundSchema = Awss3Config$outboundSchema;
  /** @deprecated use `Awss3Config$Outbound` instead. */
  export type Outbound = Awss3Config$Outbound;
}

export function awss3ConfigToJSON(awss3Config: Awss3Config): string {
  return JSON.stringify(Awss3Config$outboundSchema.parse(awss3Config));
}

export function awss3ConfigFromJSON(
  jsonString: string,
): SafeParseResult<Awss3Config, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Awss3Config$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Awss3Config' from JSON`,
  );
}
